// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: proto/settings/v1/color.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto.settings.v1";

/** Enumeration of supported color formats */
export enum ColorFormatProto {
  /** COLOR_FORMAT_PROTO_UNSPECIFIED - Default unspecified color format */
  COLOR_FORMAT_PROTO_UNSPECIFIED = 0,
  /** COLOR_FORMAT_PROTO_HEX - Color represented as a HEX string (e.g., "#FFAABB") */
  COLOR_FORMAT_PROTO_HEX = 1,
  /** COLOR_FORMAT_PROTO_RGB - Color represented using RGB components */
  COLOR_FORMAT_PROTO_RGB = 2,
  /** COLOR_FORMAT_PROTO_HSV - Color represented using HSV (Hue, Saturation, Value) components */
  COLOR_FORMAT_PROTO_HSV = 3,
  UNRECOGNIZED = -1,
}

export function colorFormatProtoFromJSON(object: any): ColorFormatProto {
  switch (object) {
    case 0:
    case "COLOR_FORMAT_PROTO_UNSPECIFIED":
      return ColorFormatProto.COLOR_FORMAT_PROTO_UNSPECIFIED;
    case 1:
    case "COLOR_FORMAT_PROTO_HEX":
      return ColorFormatProto.COLOR_FORMAT_PROTO_HEX;
    case 2:
    case "COLOR_FORMAT_PROTO_RGB":
      return ColorFormatProto.COLOR_FORMAT_PROTO_RGB;
    case 3:
    case "COLOR_FORMAT_PROTO_HSV":
      return ColorFormatProto.COLOR_FORMAT_PROTO_HSV;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ColorFormatProto.UNRECOGNIZED;
  }
}

export function colorFormatProtoToJSON(object: ColorFormatProto): string {
  switch (object) {
    case ColorFormatProto.COLOR_FORMAT_PROTO_UNSPECIFIED:
      return "COLOR_FORMAT_PROTO_UNSPECIFIED";
    case ColorFormatProto.COLOR_FORMAT_PROTO_HEX:
      return "COLOR_FORMAT_PROTO_HEX";
    case ColorFormatProto.COLOR_FORMAT_PROTO_RGB:
      return "COLOR_FORMAT_PROTO_RGB";
    case ColorFormatProto.COLOR_FORMAT_PROTO_HSV:
      return "COLOR_FORMAT_PROTO_HSV";
    case ColorFormatProto.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Defines constraints for color settings, specifying format and mode */
export interface ColorConstraintProto {
  /** The color format constraint (HEX, RGB, HSV) */
  format: ColorFormatProto;
  /** If true, enables a range mode for color selection rather than fixed values */
  rangeMode: boolean;
}

function createBaseColorConstraintProto(): ColorConstraintProto {
  return { format: 0, rangeMode: false };
}

export const ColorConstraintProto: MessageFns<ColorConstraintProto> = {
  encode(
    message: ColorConstraintProto,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.format !== 0) {
      writer.uint32(8).int32(message.format);
    }
    if (message.rangeMode !== false) {
      writer.uint32(16).bool(message.rangeMode);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ColorConstraintProto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColorConstraintProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.format = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.rangeMode = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ColorConstraintProto {
    return {
      format: isSet(object.format)
        ? colorFormatProtoFromJSON(object.format)
        : 0,
      rangeMode: isSet(object.rangeMode)
        ? globalThis.Boolean(object.rangeMode)
        : false,
    };
  },

  toJSON(message: ColorConstraintProto): unknown {
    const obj: any = {};
    if (message.format !== 0) {
      obj.format = colorFormatProtoToJSON(message.format);
    }
    if (message.rangeMode !== false) {
      obj.rangeMode = message.rangeMode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ColorConstraintProto>, I>>(
    base?: I,
  ): ColorConstraintProto {
    return ColorConstraintProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ColorConstraintProto>, I>>(
    object: I,
  ): ColorConstraintProto {
    const message = createBaseColorConstraintProto();
    message.format = object.format ?? 0;
    message.rangeMode = object.rangeMode ?? false;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

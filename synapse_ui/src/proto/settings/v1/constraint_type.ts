// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               unknown
// source: proto/settings/v1/constraint_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BooleanConstraintProto } from "./boolean";
import { ColorConstraintProto } from "./color";
import { EnumeratedConstraintProto } from "./enumerated";
import { ListConstraintProto } from "./list";
import { NumberConstraintProto } from "./number";
import { StringConstraintProto } from "./string";

export const protobufPackage = "proto.settings.v1";

/**
 * Enumeration of constraint types that can be applied to settings.
 * Some constraints may not have corresponding config messages.
 */
export enum ConstraintTypeProto {
  /** CONSTRAINT_TYPE_PROTO_UNSPECIFIED - Default unspecified constraint type */
  CONSTRAINT_TYPE_PROTO_UNSPECIFIED = 0,
  /** CONSTRAINT_TYPE_PROTO_NUMBER - Numeric range constraint */
  CONSTRAINT_TYPE_PROTO_NUMBER = 1,
  /** CONSTRAINT_TYPE_PROTO_LIST - Constraint requiring value to be one of a predefined list */
  CONSTRAINT_TYPE_PROTO_LIST = 2,
  /** CONSTRAINT_TYPE_PROTO_STRING - String-based constraint */
  CONSTRAINT_TYPE_PROTO_STRING = 3,
  /** CONSTRAINT_TYPE_PROTO_COLOR - Color-related constraint */
  CONSTRAINT_TYPE_PROTO_COLOR = 4,
  /** CONSTRAINT_TYPE_PROTO_BOOLEAN - Boolean constraint (true/false), no separate config message needed */
  CONSTRAINT_TYPE_PROTO_BOOLEAN = 5,
  /** CONSTRAINT_TYPE_PROTO_ENUMERATED - List options constraint */
  CONSTRAINT_TYPE_PROTO_ENUMERATED = 8,
  UNRECOGNIZED = -1,
}

export function constraintTypeProtoFromJSON(object: any): ConstraintTypeProto {
  switch (object) {
    case 0:
    case "CONSTRAINT_TYPE_PROTO_UNSPECIFIED":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_UNSPECIFIED;
    case 1:
    case "CONSTRAINT_TYPE_PROTO_NUMBER":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_NUMBER;
    case 2:
    case "CONSTRAINT_TYPE_PROTO_LIST":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_LIST;
    case 3:
    case "CONSTRAINT_TYPE_PROTO_STRING":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_STRING;
    case 4:
    case "CONSTRAINT_TYPE_PROTO_COLOR":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_COLOR;
    case 5:
    case "CONSTRAINT_TYPE_PROTO_BOOLEAN":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_BOOLEAN;
    case 8:
    case "CONSTRAINT_TYPE_PROTO_ENUMERATED":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_ENUMERATED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConstraintTypeProto.UNRECOGNIZED;
  }
}

export function constraintTypeProtoToJSON(object: ConstraintTypeProto): string {
  switch (object) {
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_UNSPECIFIED:
      return "CONSTRAINT_TYPE_PROTO_UNSPECIFIED";
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_NUMBER:
      return "CONSTRAINT_TYPE_PROTO_NUMBER";
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_LIST:
      return "CONSTRAINT_TYPE_PROTO_LIST";
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_STRING:
      return "CONSTRAINT_TYPE_PROTO_STRING";
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_COLOR:
      return "CONSTRAINT_TYPE_PROTO_COLOR";
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_BOOLEAN:
      return "CONSTRAINT_TYPE_PROTO_BOOLEAN";
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_ENUMERATED:
      return "CONSTRAINT_TYPE_PROTO_ENUMERATED";
    case ConstraintTypeProto.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Configuration for different types of constraints on settings values.
 * Uses a oneof to specify exactly one type of constraint configuration.
 */
export interface ConstraintConfigProto {
  /** Constraint based on a numeric value */
  numeric?: NumberConstraintProto | undefined;
  /** Constraint based on selectable list options with extra options */
  enumerated?: EnumeratedConstraintProto | undefined;
  /** Constraint based on color formats and modes */
  color?: ColorConstraintProto | undefined;
  /** Constraint based on string properties (e.g., regex, length) */
  string?: StringConstraintProto | undefined;
  /** Constraint for a value list */
  list?: ListConstraintProto | undefined;
  /** Boolean constraint */
  boolean?: BooleanConstraintProto | undefined;
}

function createBaseConstraintConfigProto(): ConstraintConfigProto {
  return {
    numeric: undefined,
    enumerated: undefined,
    color: undefined,
    string: undefined,
    list: undefined,
    boolean: undefined,
  };
}

export const ConstraintConfigProto: MessageFns<ConstraintConfigProto> = {
  encode(
    message: ConstraintConfigProto,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.numeric !== undefined) {
      NumberConstraintProto.encode(
        message.numeric,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.enumerated !== undefined) {
      EnumeratedConstraintProto.encode(
        message.enumerated,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.color !== undefined) {
      ColorConstraintProto.encode(
        message.color,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.string !== undefined) {
      StringConstraintProto.encode(
        message.string,
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.list !== undefined) {
      ListConstraintProto.encode(message.list, writer.uint32(42).fork()).join();
    }
    if (message.boolean !== undefined) {
      BooleanConstraintProto.encode(
        message.boolean,
        writer.uint32(50).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ConstraintConfigProto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConstraintConfigProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.numeric = NumberConstraintProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.enumerated = EnumeratedConstraintProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = ColorConstraintProto.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.string = StringConstraintProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.list = ListConstraintProto.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.boolean = BooleanConstraintProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConstraintConfigProto {
    return {
      numeric: isSet(object.numeric)
        ? NumberConstraintProto.fromJSON(object.numeric)
        : undefined,
      enumerated: isSet(object.enumerated)
        ? EnumeratedConstraintProto.fromJSON(object.enumerated)
        : undefined,
      color: isSet(object.color)
        ? ColorConstraintProto.fromJSON(object.color)
        : undefined,
      string: isSet(object.string)
        ? StringConstraintProto.fromJSON(object.string)
        : undefined,
      list: isSet(object.list)
        ? ListConstraintProto.fromJSON(object.list)
        : undefined,
      boolean: isSet(object.boolean)
        ? BooleanConstraintProto.fromJSON(object.boolean)
        : undefined,
    };
  },

  toJSON(message: ConstraintConfigProto): unknown {
    const obj: any = {};
    if (message.numeric !== undefined) {
      obj.numeric = NumberConstraintProto.toJSON(message.numeric);
    }
    if (message.enumerated !== undefined) {
      obj.enumerated = EnumeratedConstraintProto.toJSON(message.enumerated);
    }
    if (message.color !== undefined) {
      obj.color = ColorConstraintProto.toJSON(message.color);
    }
    if (message.string !== undefined) {
      obj.string = StringConstraintProto.toJSON(message.string);
    }
    if (message.list !== undefined) {
      obj.list = ListConstraintProto.toJSON(message.list);
    }
    if (message.boolean !== undefined) {
      obj.boolean = BooleanConstraintProto.toJSON(message.boolean);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConstraintConfigProto>, I>>(
    base?: I,
  ): ConstraintConfigProto {
    return ConstraintConfigProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConstraintConfigProto>, I>>(
    object: I,
  ): ConstraintConfigProto {
    const message = createBaseConstraintConfigProto();
    message.numeric =
      object.numeric !== undefined && object.numeric !== null
        ? NumberConstraintProto.fromPartial(object.numeric)
        : undefined;
    message.enumerated =
      object.enumerated !== undefined && object.enumerated !== null
        ? EnumeratedConstraintProto.fromPartial(object.enumerated)
        : undefined;
    message.color =
      object.color !== undefined && object.color !== null
        ? ColorConstraintProto.fromPartial(object.color)
        : undefined;
    message.string =
      object.string !== undefined && object.string !== null
        ? StringConstraintProto.fromPartial(object.string)
        : undefined;
    message.list =
      object.list !== undefined && object.list !== null
        ? ListConstraintProto.fromPartial(object.list)
        : undefined;
    message.boolean =
      object.boolean !== undefined && object.boolean !== null
        ? BooleanConstraintProto.fromPartial(object.boolean)
        : undefined;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: proto/settings/v1/constraint_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ColorConstraintProto } from "./color";
import { ListConstraintProto } from "./list";
import { ListOptionsConstraintProto } from "./list_options";
import { RangeConstraintProto } from "./range";
import { StringConstraintProto } from "./string";

export const protobufPackage = "proto.settings.v1";

export enum ConstraintTypeProto {
  CONSTRAINT_TYPE_PROTO_UNSPECIFIED = 0,
  CONSTRAINT_TYPE_PROTO_RANGE = 1,
  CONSTRAINT_TYPE_PROTO_LIST = 2,
  CONSTRAINT_TYPE_PROTO_STRING = 3,
  CONSTRAINT_TYPE_PROTO_COLOR = 4,
  /** CONSTRAINT_TYPE_PROTO_BOOLEAN - Doesn't have a config message */
  CONSTRAINT_TYPE_PROTO_BOOLEAN = 5,
  CONSTRAINT_TYPE_PROTO_LIST_OPTIONS = 8,
  UNRECOGNIZED = -1,
}

export function constraintTypeProtoFromJSON(object: any): ConstraintTypeProto {
  switch (object) {
    case 0:
    case "CONSTRAINT_TYPE_PROTO_UNSPECIFIED":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_UNSPECIFIED;
    case 1:
    case "CONSTRAINT_TYPE_PROTO_RANGE":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_RANGE;
    case 2:
    case "CONSTRAINT_TYPE_PROTO_LIST":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_LIST;
    case 3:
    case "CONSTRAINT_TYPE_PROTO_STRING":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_STRING;
    case 4:
    case "CONSTRAINT_TYPE_PROTO_COLOR":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_COLOR;
    case 5:
    case "CONSTRAINT_TYPE_PROTO_BOOLEAN":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_BOOLEAN;
    case 8:
    case "CONSTRAINT_TYPE_PROTO_LIST_OPTIONS":
      return ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_LIST_OPTIONS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConstraintTypeProto.UNRECOGNIZED;
  }
}

export function constraintTypeProtoToJSON(object: ConstraintTypeProto): string {
  switch (object) {
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_UNSPECIFIED:
      return "CONSTRAINT_TYPE_PROTO_UNSPECIFIED";
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_RANGE:
      return "CONSTRAINT_TYPE_PROTO_RANGE";
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_LIST:
      return "CONSTRAINT_TYPE_PROTO_LIST";
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_STRING:
      return "CONSTRAINT_TYPE_PROTO_STRING";
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_COLOR:
      return "CONSTRAINT_TYPE_PROTO_COLOR";
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_BOOLEAN:
      return "CONSTRAINT_TYPE_PROTO_BOOLEAN";
    case ConstraintTypeProto.CONSTRAINT_TYPE_PROTO_LIST_OPTIONS:
      return "CONSTRAINT_TYPE_PROTO_LIST_OPTIONS";
    case ConstraintTypeProto.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ConstraintConfigProto {
  range?: RangeConstraintProto | undefined;
  listOptions?: ListOptionsConstraintProto | undefined;
  color?: ColorConstraintProto | undefined;
  string?: StringConstraintProto | undefined;
  list?: ListConstraintProto | undefined;
}

function createBaseConstraintConfigProto(): ConstraintConfigProto {
  return { range: undefined, listOptions: undefined, color: undefined, string: undefined, list: undefined };
}

export const ConstraintConfigProto: MessageFns<ConstraintConfigProto> = {
  encode(message: ConstraintConfigProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.range !== undefined) {
      RangeConstraintProto.encode(message.range, writer.uint32(10).fork()).join();
    }
    if (message.listOptions !== undefined) {
      ListOptionsConstraintProto.encode(message.listOptions, writer.uint32(18).fork()).join();
    }
    if (message.color !== undefined) {
      ColorConstraintProto.encode(message.color, writer.uint32(26).fork()).join();
    }
    if (message.string !== undefined) {
      StringConstraintProto.encode(message.string, writer.uint32(34).fork()).join();
    }
    if (message.list !== undefined) {
      ListConstraintProto.encode(message.list, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConstraintConfigProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConstraintConfigProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.range = RangeConstraintProto.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.listOptions = ListOptionsConstraintProto.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = ColorConstraintProto.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.string = StringConstraintProto.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.list = ListConstraintProto.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConstraintConfigProto {
    return {
      range: isSet(object.range) ? RangeConstraintProto.fromJSON(object.range) : undefined,
      listOptions: isSet(object.listOptions) ? ListOptionsConstraintProto.fromJSON(object.listOptions) : undefined,
      color: isSet(object.color) ? ColorConstraintProto.fromJSON(object.color) : undefined,
      string: isSet(object.string) ? StringConstraintProto.fromJSON(object.string) : undefined,
      list: isSet(object.list) ? ListConstraintProto.fromJSON(object.list) : undefined,
    };
  },

  toJSON(message: ConstraintConfigProto): unknown {
    const obj: any = {};
    if (message.range !== undefined) {
      obj.range = RangeConstraintProto.toJSON(message.range);
    }
    if (message.listOptions !== undefined) {
      obj.listOptions = ListOptionsConstraintProto.toJSON(message.listOptions);
    }
    if (message.color !== undefined) {
      obj.color = ColorConstraintProto.toJSON(message.color);
    }
    if (message.string !== undefined) {
      obj.string = StringConstraintProto.toJSON(message.string);
    }
    if (message.list !== undefined) {
      obj.list = ListConstraintProto.toJSON(message.list);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConstraintConfigProto>, I>>(base?: I): ConstraintConfigProto {
    return ConstraintConfigProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConstraintConfigProto>, I>>(object: I): ConstraintConfigProto {
    const message = createBaseConstraintConfigProto();
    message.range = (object.range !== undefined && object.range !== null)
      ? RangeConstraintProto.fromPartial(object.range)
      : undefined;
    message.listOptions = (object.listOptions !== undefined && object.listOptions !== null)
      ? ListOptionsConstraintProto.fromPartial(object.listOptions)
      : undefined;
    message.color = (object.color !== undefined && object.color !== null)
      ? ColorConstraintProto.fromPartial(object.color)
      : undefined;
    message.string = (object.string !== undefined && object.string !== null)
      ? StringConstraintProto.fromPartial(object.string)
      : undefined;
    message.list = (object.list !== undefined && object.list !== null)
      ? ListConstraintProto.fromPartial(object.list)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: proto/settings/v1/settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  ConstraintConfigProto,
  ConstraintTypeProto,
  constraintTypeProtoFromJSON,
  constraintTypeProtoToJSON,
} from "./constraint_type";
import { SettingValueProto } from "./value";

export const protobufPackage = "proto.settings.v1";

export interface ConstraintProto {
  type: ConstraintTypeProto;
  constraint: ConstraintConfigProto | undefined;
}

export interface SettingProto {
  name: string;
  category: string;
  description: string;
  value: SettingValueProto | undefined;
  constraint: ConstraintProto | undefined;
}

function createBaseConstraintProto(): ConstraintProto {
  return { type: 0, constraint: undefined };
}

export const ConstraintProto: MessageFns<ConstraintProto> = {
  encode(message: ConstraintProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (message.constraint !== undefined) {
      ConstraintConfigProto.encode(message.constraint, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConstraintProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConstraintProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.constraint = ConstraintConfigProto.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConstraintProto {
    return {
      type: isSet(object.type) ? constraintTypeProtoFromJSON(object.type) : 0,
      constraint: isSet(object.constraint) ? ConstraintConfigProto.fromJSON(object.constraint) : undefined,
    };
  },

  toJSON(message: ConstraintProto): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = constraintTypeProtoToJSON(message.type);
    }
    if (message.constraint !== undefined) {
      obj.constraint = ConstraintConfigProto.toJSON(message.constraint);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConstraintProto>, I>>(base?: I): ConstraintProto {
    return ConstraintProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConstraintProto>, I>>(object: I): ConstraintProto {
    const message = createBaseConstraintProto();
    message.type = object.type ?? 0;
    message.constraint = (object.constraint !== undefined && object.constraint !== null)
      ? ConstraintConfigProto.fromPartial(object.constraint)
      : undefined;
    return message;
  },
};

function createBaseSettingProto(): SettingProto {
  return { name: "", category: "", description: "", value: undefined, constraint: undefined };
}

export const SettingProto: MessageFns<SettingProto> = {
  encode(message: SettingProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.category !== "") {
      writer.uint32(18).string(message.category);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.value !== undefined) {
      SettingValueProto.encode(message.value, writer.uint32(34).fork()).join();
    }
    if (message.constraint !== undefined) {
      ConstraintProto.encode(message.constraint, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SettingProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSettingProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = SettingValueProto.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.constraint = ConstraintProto.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SettingProto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      value: isSet(object.value) ? SettingValueProto.fromJSON(object.value) : undefined,
      constraint: isSet(object.constraint) ? ConstraintProto.fromJSON(object.constraint) : undefined,
    };
  },

  toJSON(message: SettingProto): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.value !== undefined) {
      obj.value = SettingValueProto.toJSON(message.value);
    }
    if (message.constraint !== undefined) {
      obj.constraint = ConstraintProto.toJSON(message.constraint);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SettingProto>, I>>(base?: I): SettingProto {
    return SettingProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SettingProto>, I>>(object: I): SettingProto {
    const message = createBaseSettingProto();
    message.name = object.name ?? "";
    message.category = object.category ?? "";
    message.description = object.description ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SettingValueProto.fromPartial(object.value)
      : undefined;
    message.constraint = (object.constraint !== undefined && object.constraint !== null)
      ? ConstraintProto.fromPartial(object.constraint)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

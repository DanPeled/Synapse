// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: proto/settings/v1/list.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto.settings.v1";

export interface ListConstraintProto {
  minLength: number;
  maxLength: number;
}

function createBaseListConstraintProto(): ListConstraintProto {
  return { minLength: 0, maxLength: 0 };
}

export const ListConstraintProto: MessageFns<ListConstraintProto> = {
  encode(
    message: ListConstraintProto,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.minLength !== 0) {
      writer.uint32(16).int32(message.minLength);
    }
    if (message.maxLength !== 0) {
      writer.uint32(24).int32(message.maxLength);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ListConstraintProto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConstraintProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.minLength = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxLength = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConstraintProto {
    return {
      minLength: isSet(object.minLength)
        ? globalThis.Number(object.minLength)
        : 0,
      maxLength: isSet(object.maxLength)
        ? globalThis.Number(object.maxLength)
        : 0,
    };
  },

  toJSON(message: ListConstraintProto): unknown {
    const obj: any = {};
    if (message.minLength !== 0) {
      obj.minLength = Math.round(message.minLength);
    }
    if (message.maxLength !== 0) {
      obj.maxLength = Math.round(message.maxLength);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListConstraintProto>, I>>(
    base?: I,
  ): ListConstraintProto {
    return ListConstraintProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListConstraintProto>, I>>(
    object: I,
  ): ListConstraintProto {
    const message = createBaseListConstraintProto();
    message.minLength = object.minLength ?? 0;
    message.maxLength = object.maxLength ?? 0;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

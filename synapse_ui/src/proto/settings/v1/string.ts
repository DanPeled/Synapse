// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               unknown
// source: proto/settings/v1/string.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Int32Value, StringValue } from "../../../google/protobuf/wrappers";

export const protobufPackage = "proto.settings.v1";

/** Constraint specifying limitations on string values */
export interface StringConstraintProto {
  /** Optional minimum length of the string (inclusive) */
  minLength: number | undefined;
  /** Optional maximum length of the string (inclusive) */
  maxLength: number | undefined;
  /** Optional regex pattern that the string must match */
  pattern: string | undefined;
}

function createBaseStringConstraintProto(): StringConstraintProto {
  return { minLength: undefined, maxLength: undefined, pattern: undefined };
}

export const StringConstraintProto: MessageFns<StringConstraintProto> = {
  encode(
    message: StringConstraintProto,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.minLength !== undefined) {
      Int32Value.encode(
        { value: message.minLength! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.maxLength !== undefined) {
      Int32Value.encode(
        { value: message.maxLength! },
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.pattern !== undefined) {
      StringValue.encode(
        { value: message.pattern! },
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): StringConstraintProto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStringConstraintProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.minLength = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.maxLength = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pattern = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StringConstraintProto {
    return {
      minLength: isSet(object.minLength) ? Number(object.minLength) : undefined,
      maxLength: isSet(object.maxLength) ? Number(object.maxLength) : undefined,
      pattern: isSet(object.pattern) ? String(object.pattern) : undefined,
    };
  },

  toJSON(message: StringConstraintProto): unknown {
    const obj: any = {};
    if (message.minLength !== undefined) {
      obj.minLength = message.minLength;
    }
    if (message.maxLength !== undefined) {
      obj.maxLength = message.maxLength;
    }
    if (message.pattern !== undefined) {
      obj.pattern = message.pattern;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StringConstraintProto>, I>>(
    base?: I,
  ): StringConstraintProto {
    return StringConstraintProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StringConstraintProto>, I>>(
    object: I,
  ): StringConstraintProto {
    const message = createBaseStringConstraintProto();
    message.minLength = object.minLength ?? undefined;
    message.maxLength = object.maxLength ?? undefined;
    message.pattern = object.pattern ?? undefined;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

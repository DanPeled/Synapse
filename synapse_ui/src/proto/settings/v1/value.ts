// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: proto/settings/v1/value.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto.settings.v1";

export interface SettingValueProto {
  intValue?: number | undefined;
  stringValue?: string | undefined;
  boolValue?: boolean | undefined;
  floatValue?: number | undefined;
  bytesValue?: Uint8Array | undefined;
  intArrayValue: number[];
  stringArrayValue: string[];
  boolArrayValue: boolean[];
  floatArrayValue: number[];
  bytesArrayValue: Uint8Array[];
}

function createBaseSettingValueProto(): SettingValueProto {
  return {
    intValue: undefined,
    stringValue: undefined,
    boolValue: undefined,
    floatValue: undefined,
    bytesValue: undefined,
    intArrayValue: [],
    stringArrayValue: [],
    boolArrayValue: [],
    floatArrayValue: [],
    bytesArrayValue: [],
  };
}

export const SettingValueProto: MessageFns<SettingValueProto> = {
  encode(
    message: SettingValueProto,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.intValue !== undefined) {
      writer.uint32(8).int32(message.intValue);
    }
    if (message.stringValue !== undefined) {
      writer.uint32(18).string(message.stringValue);
    }
    if (message.boolValue !== undefined) {
      writer.uint32(24).bool(message.boolValue);
    }
    if (message.floatValue !== undefined) {
      writer.uint32(37).float(message.floatValue);
    }
    if (message.bytesValue !== undefined) {
      writer.uint32(42).bytes(message.bytesValue);
    }
    writer.uint32(50).fork();
    for (const v of message.intArrayValue) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.stringArrayValue) {
      writer.uint32(58).string(v!);
    }
    writer.uint32(66).fork();
    for (const v of message.boolArrayValue) {
      writer.bool(v);
    }
    writer.join();
    writer.uint32(74).fork();
    for (const v of message.floatArrayValue) {
      writer.float(v);
    }
    writer.join();
    for (const v of message.bytesArrayValue) {
      writer.uint32(82).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SettingValueProto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSettingValueProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.intValue = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.floatValue = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bytesValue = reader.bytes();
          continue;
        }
        case 6: {
          if (tag === 48) {
            message.intArrayValue.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.intArrayValue.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.stringArrayValue.push(reader.string());
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.boolArrayValue.push(reader.bool());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.boolArrayValue.push(reader.bool());
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag === 77) {
            message.floatArrayValue.push(reader.float());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.floatArrayValue.push(reader.float());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.bytesArrayValue.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SettingValueProto {
    return {
      intValue: isSet(object.intValue)
        ? globalThis.Number(object.intValue)
        : undefined,
      stringValue: isSet(object.stringValue)
        ? globalThis.String(object.stringValue)
        : undefined,
      boolValue: isSet(object.boolValue)
        ? globalThis.Boolean(object.boolValue)
        : undefined,
      floatValue: isSet(object.floatValue)
        ? globalThis.Number(object.floatValue)
        : undefined,
      bytesValue: isSet(object.bytesValue)
        ? bytesFromBase64(object.bytesValue)
        : undefined,
      intArrayValue: globalThis.Array.isArray(object?.intArrayValue)
        ? object.intArrayValue.map((e: any) => globalThis.Number(e))
        : [],
      stringArrayValue: globalThis.Array.isArray(object?.stringArrayValue)
        ? object.stringArrayValue.map((e: any) => globalThis.String(e))
        : [],
      boolArrayValue: globalThis.Array.isArray(object?.boolArrayValue)
        ? object.boolArrayValue.map((e: any) => globalThis.Boolean(e))
        : [],
      floatArrayValue: globalThis.Array.isArray(object?.floatArrayValue)
        ? object.floatArrayValue.map((e: any) => globalThis.Number(e))
        : [],
      bytesArrayValue: globalThis.Array.isArray(object?.bytesArrayValue)
        ? object.bytesArrayValue.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: SettingValueProto): unknown {
    const obj: any = {};
    if (message.intValue !== undefined) {
      obj.intValue = Math.round(message.intValue);
    }
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.boolValue !== undefined) {
      obj.boolValue = message.boolValue;
    }
    if (message.floatValue !== undefined) {
      obj.floatValue = message.floatValue;
    }
    if (message.bytesValue !== undefined) {
      obj.bytesValue = base64FromBytes(message.bytesValue);
    }
    if (message.intArrayValue?.length) {
      obj.intArrayValue = message.intArrayValue.map((e) => Math.round(e));
    }
    if (message.stringArrayValue?.length) {
      obj.stringArrayValue = message.stringArrayValue;
    }
    if (message.boolArrayValue?.length) {
      obj.boolArrayValue = message.boolArrayValue;
    }
    if (message.floatArrayValue?.length) {
      obj.floatArrayValue = message.floatArrayValue;
    }
    if (message.bytesArrayValue?.length) {
      obj.bytesArrayValue = message.bytesArrayValue.map((e) =>
        base64FromBytes(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SettingValueProto>, I>>(
    base?: I,
  ): SettingValueProto {
    return SettingValueProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SettingValueProto>, I>>(
    object: I,
  ): SettingValueProto {
    const message = createBaseSettingValueProto();
    message.intValue = object.intValue ?? undefined;
    message.stringValue = object.stringValue ?? undefined;
    message.boolValue = object.boolValue ?? undefined;
    message.floatValue = object.floatValue ?? undefined;
    message.bytesValue = object.bytesValue ?? undefined;
    message.intArrayValue = object.intArrayValue?.map((e) => e) || [];
    message.stringArrayValue = object.stringArrayValue?.map((e) => e) || [];
    message.boolArrayValue = object.boolArrayValue?.map((e) => e) || [];
    message.floatArrayValue = object.floatArrayValue?.map((e) => e) || [];
    message.bytesArrayValue = object.bytesArrayValue?.map((e) => e) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

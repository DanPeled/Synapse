// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: proto/settings/v1/list_options.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { SettingValueProto } from "./value";

export const protobufPackage = "proto.settings.v1";

/**
 * Constraint that limits a setting to a predefined list of possible values,
 * with an option to allow single or multiple selections.
 */
export interface ListOptionsConstraintProto {
  /** List of allowed option values for the setting */
  options: SettingValueProto[];
  /**
   * If true, multiple options can be selected by the user.
   * If false, only a single option can be selected.
   */
  allowMultiple: boolean;
}

function createBaseListOptionsConstraintProto(): ListOptionsConstraintProto {
  return { options: [], allowMultiple: false };
}

export const ListOptionsConstraintProto: MessageFns<ListOptionsConstraintProto> = {
  encode(message: ListOptionsConstraintProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.options) {
      SettingValueProto.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.allowMultiple !== false) {
      writer.uint32(16).bool(message.allowMultiple);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOptionsConstraintProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOptionsConstraintProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.options.push(SettingValueProto.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.allowMultiple = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOptionsConstraintProto {
    return {
      options: globalThis.Array.isArray(object?.options)
        ? object.options.map((e: any) => SettingValueProto.fromJSON(e))
        : [],
      allowMultiple: isSet(object.allowMultiple) ? globalThis.Boolean(object.allowMultiple) : false,
    };
  },

  toJSON(message: ListOptionsConstraintProto): unknown {
    const obj: any = {};
    if (message.options?.length) {
      obj.options = message.options.map((e) => SettingValueProto.toJSON(e));
    }
    if (message.allowMultiple !== false) {
      obj.allowMultiple = message.allowMultiple;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOptionsConstraintProto>, I>>(base?: I): ListOptionsConstraintProto {
    return ListOptionsConstraintProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOptionsConstraintProto>, I>>(object: I): ListOptionsConstraintProto {
    const message = createBaseListOptionsConstraintProto();
    message.options = object.options?.map((e) => SettingValueProto.fromPartial(e)) || [];
    message.allowMultiple = object.allowMultiple ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

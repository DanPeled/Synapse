// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: proto/v1/camera.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto.v1";

export interface CameraProto {
  name: string;
  streamPath: string;
  physicalConnection: string;
  index: number;
}

export interface LatencyStatusProto {
  latencyCapture: number;
  latencyProcess: number;
}

function createBaseCameraProto(): CameraProto {
  return { name: "", streamPath: "", physicalConnection: "", index: 0 };
}

export const CameraProto: MessageFns<CameraProto> = {
  encode(message: CameraProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.streamPath !== "") {
      writer.uint32(18).string(message.streamPath);
    }
    if (message.physicalConnection !== "") {
      writer.uint32(26).string(message.physicalConnection);
    }
    if (message.index !== 0) {
      writer.uint32(32).int32(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CameraProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCameraProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.streamPath = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.physicalConnection = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CameraProto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      streamPath: isSet(object.streamPath) ? globalThis.String(object.streamPath) : "",
      physicalConnection: isSet(object.physicalConnection) ? globalThis.String(object.physicalConnection) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
    };
  },

  toJSON(message: CameraProto): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.streamPath !== "") {
      obj.streamPath = message.streamPath;
    }
    if (message.physicalConnection !== "") {
      obj.physicalConnection = message.physicalConnection;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CameraProto>, I>>(base?: I): CameraProto {
    return CameraProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CameraProto>, I>>(object: I): CameraProto {
    const message = createBaseCameraProto();
    message.name = object.name ?? "";
    message.streamPath = object.streamPath ?? "";
    message.physicalConnection = object.physicalConnection ?? "";
    message.index = object.index ?? 0;
    return message;
  },
};

function createBaseLatencyStatusProto(): LatencyStatusProto {
  return { latencyCapture: 0, latencyProcess: 0 };
}

export const LatencyStatusProto: MessageFns<LatencyStatusProto> = {
  encode(message: LatencyStatusProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.latencyCapture !== 0) {
      writer.uint32(8).int64(message.latencyCapture);
    }
    if (message.latencyProcess !== 0) {
      writer.uint32(16).int64(message.latencyProcess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LatencyStatusProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLatencyStatusProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.latencyCapture = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.latencyProcess = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LatencyStatusProto {
    return {
      latencyCapture: isSet(object.latencyCapture) ? globalThis.Number(object.latencyCapture) : 0,
      latencyProcess: isSet(object.latencyProcess) ? globalThis.Number(object.latencyProcess) : 0,
    };
  },

  toJSON(message: LatencyStatusProto): unknown {
    const obj: any = {};
    if (message.latencyCapture !== 0) {
      obj.latencyCapture = Math.round(message.latencyCapture);
    }
    if (message.latencyProcess !== 0) {
      obj.latencyProcess = Math.round(message.latencyProcess);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LatencyStatusProto>, I>>(base?: I): LatencyStatusProto {
    return LatencyStatusProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LatencyStatusProto>, I>>(object: I): LatencyStatusProto {
    const message = createBaseLatencyStatusProto();
    message.latencyCapture = object.latencyCapture ?? 0;
    message.latencyProcess = object.latencyProcess ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

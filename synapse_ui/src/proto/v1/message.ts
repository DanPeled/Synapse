// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: proto/v1/message.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AlertProto } from "./alert";
import {
  CalibrationDataProto,
  CameraPerformanceProto,
  CameraProto,
  RemoveCalibrationDataMessageProto,
  RenameCameraMessageProto,
  SetCameraRecordingStatusMessageProto,
  SetDefaultPipelineMessageProto,
} from "./camera";
import {
  DeviceInfoProto,
  HardwareMetricsProto,
  SetConnectionInfoProto,
  SetNetworkSettingsProto,
} from "./device";
import { LogMessageProto } from "./log";
import {
  PipelineProto,
  PipelineResultProto,
  PipelineTypeProto,
  SetPipelineIndexMessageProto,
  SetPipelineNameMessageProto,
  SetPipelineTypeMessageProto,
  SetPipleineSettingMessageProto,
} from "./pipeline";

export const protobufPackage = "proto.v1";

/** Enum for different message types in the protocol */
export enum MessageTypeProto {
  MESSAGE_TYPE_PROTO_UNSPECIFIED = 0,
  MESSAGE_TYPE_PROTO_SEND_DEVICE_INFO = 1,
  MESSAGE_TYPE_PROTO_SEND_METRICS = 2,
  MESSAGE_TYPE_PROTO_ADD_PIPELINE = 3,
  MESSAGE_TYPE_PROTO_SEND_PIPELINE_TYPES = 4,
  MESSAGE_TYPE_PROTO_ADD_CAMERA = 5,
  MESSAGE_TYPE_PROTO_SET_TYPE_FOR_PIPELINE = 6,
  MESSAGE_TYPE_PROTO_SET_SETTING = 7,
  MESSAGE_TYPE_PROTO_SET_PIPELINE_INDEX = 8,
  MESSAGE_TYPE_PROTO_SET_PIPELINE_NAME = 9,
  MESSAGE_TYPE_PROTO_SET_DEFAULT_PIPELINE = 10,
  MESSAGE_TYPE_PROTO_DELETE_PIPELINE = 11,
  MESSAGE_TYPE_PROTO_LOG = 12,
  MESSAGE_TYPE_PROTO_SAVE = 13,
  MESSAGE_TYPE_PROTO_REPORT_CAMERA_PERFORMANCE = 14,
  MESSAGE_TYPE_PROTO_SET_NETWORK_SETTINGS = 15,
  MESSAGE_TYPE_PROTO_REBOOT = 16,
  MESSAGE_TYPE_PROTO_FORMAT = 17,
  MESSAGE_TYPE_PROTO_RESTART_SYNAPSE = 18,
  MESSAGE_TYPE_PROTO_RENAME_CAMERA = 19,
  MESSAGE_TYPE_PROTO_CALIBRATING = 20,
  MESSAGE_TYPE_PROTO_CALIBRATION_DATA = 21,
  MESSAGE_TYPE_PROTO_DELETE_CALIBRATION = 22,
  MESSAGE_TYPE_PROTO_SET_CAMERA_RECORDING_STATUS = 23,
  MESSAGE_TYPE_PROTO_SET_DEVICE_CONNECTION_STATUS = 24,
  MESSAGE_TYPE_PROTO_SET_PIPELINE_RESULT = 25,
  MESSAGE_TYPE_PROTO_ALERT = 26,
  UNRECOGNIZED = -1,
}

export function messageTypeProtoFromJSON(object: any): MessageTypeProto {
  switch (object) {
    case 0:
    case "MESSAGE_TYPE_PROTO_UNSPECIFIED":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_UNSPECIFIED;
    case 1:
    case "MESSAGE_TYPE_PROTO_SEND_DEVICE_INFO":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SEND_DEVICE_INFO;
    case 2:
    case "MESSAGE_TYPE_PROTO_SEND_METRICS":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SEND_METRICS;
    case 3:
    case "MESSAGE_TYPE_PROTO_ADD_PIPELINE":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_ADD_PIPELINE;
    case 4:
    case "MESSAGE_TYPE_PROTO_SEND_PIPELINE_TYPES":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SEND_PIPELINE_TYPES;
    case 5:
    case "MESSAGE_TYPE_PROTO_ADD_CAMERA":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_ADD_CAMERA;
    case 6:
    case "MESSAGE_TYPE_PROTO_SET_TYPE_FOR_PIPELINE":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SET_TYPE_FOR_PIPELINE;
    case 7:
    case "MESSAGE_TYPE_PROTO_SET_SETTING":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SET_SETTING;
    case 8:
    case "MESSAGE_TYPE_PROTO_SET_PIPELINE_INDEX":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SET_PIPELINE_INDEX;
    case 9:
    case "MESSAGE_TYPE_PROTO_SET_PIPELINE_NAME":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SET_PIPELINE_NAME;
    case 10:
    case "MESSAGE_TYPE_PROTO_SET_DEFAULT_PIPELINE":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SET_DEFAULT_PIPELINE;
    case 11:
    case "MESSAGE_TYPE_PROTO_DELETE_PIPELINE":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_DELETE_PIPELINE;
    case 12:
    case "MESSAGE_TYPE_PROTO_LOG":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_LOG;
    case 13:
    case "MESSAGE_TYPE_PROTO_SAVE":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SAVE;
    case 14:
    case "MESSAGE_TYPE_PROTO_REPORT_CAMERA_PERFORMANCE":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_REPORT_CAMERA_PERFORMANCE;
    case 15:
    case "MESSAGE_TYPE_PROTO_SET_NETWORK_SETTINGS":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SET_NETWORK_SETTINGS;
    case 16:
    case "MESSAGE_TYPE_PROTO_REBOOT":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_REBOOT;
    case 17:
    case "MESSAGE_TYPE_PROTO_FORMAT":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_FORMAT;
    case 18:
    case "MESSAGE_TYPE_PROTO_RESTART_SYNAPSE":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_RESTART_SYNAPSE;
    case 19:
    case "MESSAGE_TYPE_PROTO_RENAME_CAMERA":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_RENAME_CAMERA;
    case 20:
    case "MESSAGE_TYPE_PROTO_CALIBRATING":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_CALIBRATING;
    case 21:
    case "MESSAGE_TYPE_PROTO_CALIBRATION_DATA":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_CALIBRATION_DATA;
    case 22:
    case "MESSAGE_TYPE_PROTO_DELETE_CALIBRATION":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_DELETE_CALIBRATION;
    case 23:
    case "MESSAGE_TYPE_PROTO_SET_CAMERA_RECORDING_STATUS":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SET_CAMERA_RECORDING_STATUS;
    case 24:
    case "MESSAGE_TYPE_PROTO_SET_DEVICE_CONNECTION_STATUS":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SET_DEVICE_CONNECTION_STATUS;
    case 25:
    case "MESSAGE_TYPE_PROTO_SET_PIPELINE_RESULT":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SET_PIPELINE_RESULT;
    case 26:
    case "MESSAGE_TYPE_PROTO_ALERT":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_ALERT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageTypeProto.UNRECOGNIZED;
  }
}

export function messageTypeProtoToJSON(object: MessageTypeProto): string {
  switch (object) {
    case MessageTypeProto.MESSAGE_TYPE_PROTO_UNSPECIFIED:
      return "MESSAGE_TYPE_PROTO_UNSPECIFIED";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SEND_DEVICE_INFO:
      return "MESSAGE_TYPE_PROTO_SEND_DEVICE_INFO";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SEND_METRICS:
      return "MESSAGE_TYPE_PROTO_SEND_METRICS";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_ADD_PIPELINE:
      return "MESSAGE_TYPE_PROTO_ADD_PIPELINE";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SEND_PIPELINE_TYPES:
      return "MESSAGE_TYPE_PROTO_SEND_PIPELINE_TYPES";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_ADD_CAMERA:
      return "MESSAGE_TYPE_PROTO_ADD_CAMERA";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SET_TYPE_FOR_PIPELINE:
      return "MESSAGE_TYPE_PROTO_SET_TYPE_FOR_PIPELINE";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SET_SETTING:
      return "MESSAGE_TYPE_PROTO_SET_SETTING";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SET_PIPELINE_INDEX:
      return "MESSAGE_TYPE_PROTO_SET_PIPELINE_INDEX";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SET_PIPELINE_NAME:
      return "MESSAGE_TYPE_PROTO_SET_PIPELINE_NAME";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SET_DEFAULT_PIPELINE:
      return "MESSAGE_TYPE_PROTO_SET_DEFAULT_PIPELINE";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_DELETE_PIPELINE:
      return "MESSAGE_TYPE_PROTO_DELETE_PIPELINE";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_LOG:
      return "MESSAGE_TYPE_PROTO_LOG";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SAVE:
      return "MESSAGE_TYPE_PROTO_SAVE";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_REPORT_CAMERA_PERFORMANCE:
      return "MESSAGE_TYPE_PROTO_REPORT_CAMERA_PERFORMANCE";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SET_NETWORK_SETTINGS:
      return "MESSAGE_TYPE_PROTO_SET_NETWORK_SETTINGS";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_REBOOT:
      return "MESSAGE_TYPE_PROTO_REBOOT";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_FORMAT:
      return "MESSAGE_TYPE_PROTO_FORMAT";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_RESTART_SYNAPSE:
      return "MESSAGE_TYPE_PROTO_RESTART_SYNAPSE";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_RENAME_CAMERA:
      return "MESSAGE_TYPE_PROTO_RENAME_CAMERA";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_CALIBRATING:
      return "MESSAGE_TYPE_PROTO_CALIBRATING";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_CALIBRATION_DATA:
      return "MESSAGE_TYPE_PROTO_CALIBRATION_DATA";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_DELETE_CALIBRATION:
      return "MESSAGE_TYPE_PROTO_DELETE_CALIBRATION";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SET_CAMERA_RECORDING_STATUS:
      return "MESSAGE_TYPE_PROTO_SET_CAMERA_RECORDING_STATUS";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SET_DEVICE_CONNECTION_STATUS:
      return "MESSAGE_TYPE_PROTO_SET_DEVICE_CONNECTION_STATUS";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SET_PIPELINE_RESULT:
      return "MESSAGE_TYPE_PROTO_SET_PIPELINE_RESULT";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_ALERT:
      return "MESSAGE_TYPE_PROTO_ALERT";
    case MessageTypeProto.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Main message structure for communication */
export interface MessageProto {
  /** Type of the message, indicating what kind of data it contains */
  type: MessageTypeProto;
  /** Information about the device */
  deviceInfo?: DeviceInfoProto | undefined;
  /** Metrics related to hardware performance */
  hardwareMetrics?: HardwareMetricsProto | undefined;
  /** Information about the camera */
  cameraInfo?: CameraProto | undefined;
  /** Information about the pipeline */
  pipelineInfo?: PipelineProto | undefined;
  /** Message to set the type for a pipeline */
  setPipelineType?: SetPipelineTypeMessageProto | undefined;
  /** Message to set a setting for a pipeline */
  setPipelineSetting?: SetPipleineSettingMessageProto | undefined;
  /** Message to set the index of a pipeline */
  setPipelineIndex?: SetPipelineIndexMessageProto | undefined;
  /** Message to set the name of a pipeline */
  setPipelineName?: SetPipelineNameMessageProto | undefined;
  /** Message to set the default pipeline */
  setDefaultPipeline?: SetDefaultPipelineMessageProto | undefined;
  /** Index of the pipeline to be removed */
  removePipelineIndex?: number | undefined;
  /** Log message containing log data */
  log?: LogMessageProto | undefined;
  /** Performance data for a camera */
  cameraPerformance?: CameraPerformanceProto | undefined;
  /** Message to set network settings */
  setNetworkSettings?: SetNetworkSettingsProto | undefined;
  /** Message to rename a camera */
  renameCamera?: RenameCameraMessageProto | undefined;
  /** Calibration data for a camera */
  calibrationData?: CalibrationDataProto | undefined;
  /** Message to delete calibration data */
  deleteCalibration?: RemoveCalibrationDataMessageProto | undefined;
  /** Message to set camera recording status */
  setCameraRecordingStatus?: SetCameraRecordingStatusMessageProto | undefined;
  /** Message to set connection information for the device */
  setConnectionInfo?: SetConnectionInfoProto | undefined;
  /** Result of a pipeline operation */
  pipelineResult?: PipelineResultProto | undefined;
  /** Alert message containing alert data */
  alert?: AlertProto | undefined;
  /** List of pipeline types available in the system */
  pipelineTypeInfo: PipelineTypeProto[];
}

function createBaseMessageProto(): MessageProto {
  return {
    type: 0,
    deviceInfo: undefined,
    hardwareMetrics: undefined,
    cameraInfo: undefined,
    pipelineInfo: undefined,
    setPipelineType: undefined,
    setPipelineSetting: undefined,
    setPipelineIndex: undefined,
    setPipelineName: undefined,
    setDefaultPipeline: undefined,
    removePipelineIndex: undefined,
    log: undefined,
    cameraPerformance: undefined,
    setNetworkSettings: undefined,
    renameCamera: undefined,
    calibrationData: undefined,
    deleteCalibration: undefined,
    setCameraRecordingStatus: undefined,
    setConnectionInfo: undefined,
    pipelineResult: undefined,
    alert: undefined,
    pipelineTypeInfo: [],
  };
}

export const MessageProto: MessageFns<MessageProto> = {
  encode(
    message: MessageProto,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.deviceInfo !== undefined) {
      DeviceInfoProto.encode(
        message.deviceInfo,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.hardwareMetrics !== undefined) {
      HardwareMetricsProto.encode(
        message.hardwareMetrics,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.cameraInfo !== undefined) {
      CameraProto.encode(message.cameraInfo, writer.uint32(34).fork()).join();
    }
    if (message.pipelineInfo !== undefined) {
      PipelineProto.encode(
        message.pipelineInfo,
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.setPipelineType !== undefined) {
      SetPipelineTypeMessageProto.encode(
        message.setPipelineType,
        writer.uint32(50).fork(),
      ).join();
    }
    if (message.setPipelineSetting !== undefined) {
      SetPipleineSettingMessageProto.encode(
        message.setPipelineSetting,
        writer.uint32(58).fork(),
      ).join();
    }
    if (message.setPipelineIndex !== undefined) {
      SetPipelineIndexMessageProto.encode(
        message.setPipelineIndex,
        writer.uint32(66).fork(),
      ).join();
    }
    if (message.setPipelineName !== undefined) {
      SetPipelineNameMessageProto.encode(
        message.setPipelineName,
        writer.uint32(74).fork(),
      ).join();
    }
    if (message.setDefaultPipeline !== undefined) {
      SetDefaultPipelineMessageProto.encode(
        message.setDefaultPipeline,
        writer.uint32(82).fork(),
      ).join();
    }
    if (message.removePipelineIndex !== undefined) {
      writer.uint32(88).int32(message.removePipelineIndex);
    }
    if (message.log !== undefined) {
      LogMessageProto.encode(message.log, writer.uint32(98).fork()).join();
    }
    if (message.cameraPerformance !== undefined) {
      CameraPerformanceProto.encode(
        message.cameraPerformance,
        writer.uint32(106).fork(),
      ).join();
    }
    if (message.setNetworkSettings !== undefined) {
      SetNetworkSettingsProto.encode(
        message.setNetworkSettings,
        writer.uint32(114).fork(),
      ).join();
    }
    if (message.renameCamera !== undefined) {
      RenameCameraMessageProto.encode(
        message.renameCamera,
        writer.uint32(122).fork(),
      ).join();
    }
    if (message.calibrationData !== undefined) {
      CalibrationDataProto.encode(
        message.calibrationData,
        writer.uint32(130).fork(),
      ).join();
    }
    if (message.deleteCalibration !== undefined) {
      RemoveCalibrationDataMessageProto.encode(
        message.deleteCalibration,
        writer.uint32(138).fork(),
      ).join();
    }
    if (message.setCameraRecordingStatus !== undefined) {
      SetCameraRecordingStatusMessageProto.encode(
        message.setCameraRecordingStatus,
        writer.uint32(146).fork(),
      ).join();
    }
    if (message.setConnectionInfo !== undefined) {
      SetConnectionInfoProto.encode(
        message.setConnectionInfo,
        writer.uint32(154).fork(),
      ).join();
    }
    if (message.pipelineResult !== undefined) {
      PipelineResultProto.encode(
        message.pipelineResult,
        writer.uint32(170).fork(),
      ).join();
    }
    if (message.alert !== undefined) {
      AlertProto.encode(message.alert, writer.uint32(178).fork()).join();
    }
    for (const v of message.pipelineTypeInfo) {
      PipelineTypeProto.encode(v!, writer.uint32(162).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageProto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.deviceInfo = DeviceInfoProto.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.hardwareMetrics = HardwareMetricsProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cameraInfo = CameraProto.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pipelineInfo = PipelineProto.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.setPipelineType = SetPipelineTypeMessageProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.setPipelineSetting = SetPipleineSettingMessageProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.setPipelineIndex = SetPipelineIndexMessageProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.setPipelineName = SetPipelineNameMessageProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.setDefaultPipeline = SetDefaultPipelineMessageProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.removePipelineIndex = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.log = LogMessageProto.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.cameraPerformance = CameraPerformanceProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.setNetworkSettings = SetNetworkSettingsProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.renameCamera = RenameCameraMessageProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.calibrationData = CalibrationDataProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.deleteCalibration = RemoveCalibrationDataMessageProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.setCameraRecordingStatus =
            SetCameraRecordingStatusMessageProto.decode(
              reader,
              reader.uint32(),
            );
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.setConnectionInfo = SetConnectionInfoProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.pipelineResult = PipelineResultProto.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.alert = AlertProto.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.pipelineTypeInfo.push(
            PipelineTypeProto.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageProto {
    return {
      type: isSet(object.type) ? messageTypeProtoFromJSON(object.type) : 0,
      deviceInfo: isSet(object.deviceInfo)
        ? DeviceInfoProto.fromJSON(object.deviceInfo)
        : undefined,
      hardwareMetrics: isSet(object.hardwareMetrics)
        ? HardwareMetricsProto.fromJSON(object.hardwareMetrics)
        : undefined,
      cameraInfo: isSet(object.cameraInfo)
        ? CameraProto.fromJSON(object.cameraInfo)
        : undefined,
      pipelineInfo: isSet(object.pipelineInfo)
        ? PipelineProto.fromJSON(object.pipelineInfo)
        : undefined,
      setPipelineType: isSet(object.setPipelineType)
        ? SetPipelineTypeMessageProto.fromJSON(object.setPipelineType)
        : undefined,
      setPipelineSetting: isSet(object.setPipelineSetting)
        ? SetPipleineSettingMessageProto.fromJSON(object.setPipelineSetting)
        : undefined,
      setPipelineIndex: isSet(object.setPipelineIndex)
        ? SetPipelineIndexMessageProto.fromJSON(object.setPipelineIndex)
        : undefined,
      setPipelineName: isSet(object.setPipelineName)
        ? SetPipelineNameMessageProto.fromJSON(object.setPipelineName)
        : undefined,
      setDefaultPipeline: isSet(object.setDefaultPipeline)
        ? SetDefaultPipelineMessageProto.fromJSON(object.setDefaultPipeline)
        : undefined,
      removePipelineIndex: isSet(object.removePipelineIndex)
        ? globalThis.Number(object.removePipelineIndex)
        : undefined,
      log: isSet(object.log) ? LogMessageProto.fromJSON(object.log) : undefined,
      cameraPerformance: isSet(object.cameraPerformance)
        ? CameraPerformanceProto.fromJSON(object.cameraPerformance)
        : undefined,
      setNetworkSettings: isSet(object.setNetworkSettings)
        ? SetNetworkSettingsProto.fromJSON(object.setNetworkSettings)
        : undefined,
      renameCamera: isSet(object.renameCamera)
        ? RenameCameraMessageProto.fromJSON(object.renameCamera)
        : undefined,
      calibrationData: isSet(object.calibrationData)
        ? CalibrationDataProto.fromJSON(object.calibrationData)
        : undefined,
      deleteCalibration: isSet(object.deleteCalibration)
        ? RemoveCalibrationDataMessageProto.fromJSON(object.deleteCalibration)
        : undefined,
      setCameraRecordingStatus: isSet(object.setCameraRecordingStatus)
        ? SetCameraRecordingStatusMessageProto.fromJSON(
            object.setCameraRecordingStatus,
          )
        : undefined,
      setConnectionInfo: isSet(object.setConnectionInfo)
        ? SetConnectionInfoProto.fromJSON(object.setConnectionInfo)
        : undefined,
      pipelineResult: isSet(object.pipelineResult)
        ? PipelineResultProto.fromJSON(object.pipelineResult)
        : undefined,
      alert: isSet(object.alert)
        ? AlertProto.fromJSON(object.alert)
        : undefined,
      pipelineTypeInfo: globalThis.Array.isArray(object?.pipelineTypeInfo)
        ? object.pipelineTypeInfo.map((e: any) => PipelineTypeProto.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MessageProto): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = messageTypeProtoToJSON(message.type);
    }
    if (message.deviceInfo !== undefined) {
      obj.deviceInfo = DeviceInfoProto.toJSON(message.deviceInfo);
    }
    if (message.hardwareMetrics !== undefined) {
      obj.hardwareMetrics = HardwareMetricsProto.toJSON(
        message.hardwareMetrics,
      );
    }
    if (message.cameraInfo !== undefined) {
      obj.cameraInfo = CameraProto.toJSON(message.cameraInfo);
    }
    if (message.pipelineInfo !== undefined) {
      obj.pipelineInfo = PipelineProto.toJSON(message.pipelineInfo);
    }
    if (message.setPipelineType !== undefined) {
      obj.setPipelineType = SetPipelineTypeMessageProto.toJSON(
        message.setPipelineType,
      );
    }
    if (message.setPipelineSetting !== undefined) {
      obj.setPipelineSetting = SetPipleineSettingMessageProto.toJSON(
        message.setPipelineSetting,
      );
    }
    if (message.setPipelineIndex !== undefined) {
      obj.setPipelineIndex = SetPipelineIndexMessageProto.toJSON(
        message.setPipelineIndex,
      );
    }
    if (message.setPipelineName !== undefined) {
      obj.setPipelineName = SetPipelineNameMessageProto.toJSON(
        message.setPipelineName,
      );
    }
    if (message.setDefaultPipeline !== undefined) {
      obj.setDefaultPipeline = SetDefaultPipelineMessageProto.toJSON(
        message.setDefaultPipeline,
      );
    }
    if (message.removePipelineIndex !== undefined) {
      obj.removePipelineIndex = Math.round(message.removePipelineIndex);
    }
    if (message.log !== undefined) {
      obj.log = LogMessageProto.toJSON(message.log);
    }
    if (message.cameraPerformance !== undefined) {
      obj.cameraPerformance = CameraPerformanceProto.toJSON(
        message.cameraPerformance,
      );
    }
    if (message.setNetworkSettings !== undefined) {
      obj.setNetworkSettings = SetNetworkSettingsProto.toJSON(
        message.setNetworkSettings,
      );
    }
    if (message.renameCamera !== undefined) {
      obj.renameCamera = RenameCameraMessageProto.toJSON(message.renameCamera);
    }
    if (message.calibrationData !== undefined) {
      obj.calibrationData = CalibrationDataProto.toJSON(
        message.calibrationData,
      );
    }
    if (message.deleteCalibration !== undefined) {
      obj.deleteCalibration = RemoveCalibrationDataMessageProto.toJSON(
        message.deleteCalibration,
      );
    }
    if (message.setCameraRecordingStatus !== undefined) {
      obj.setCameraRecordingStatus =
        SetCameraRecordingStatusMessageProto.toJSON(
          message.setCameraRecordingStatus,
        );
    }
    if (message.setConnectionInfo !== undefined) {
      obj.setConnectionInfo = SetConnectionInfoProto.toJSON(
        message.setConnectionInfo,
      );
    }
    if (message.pipelineResult !== undefined) {
      obj.pipelineResult = PipelineResultProto.toJSON(message.pipelineResult);
    }
    if (message.alert !== undefined) {
      obj.alert = AlertProto.toJSON(message.alert);
    }
    if (message.pipelineTypeInfo?.length) {
      obj.pipelineTypeInfo = message.pipelineTypeInfo.map((e) =>
        PipelineTypeProto.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageProto>, I>>(
    base?: I,
  ): MessageProto {
    return MessageProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageProto>, I>>(
    object: I,
  ): MessageProto {
    const message = createBaseMessageProto();
    message.type = object.type ?? 0;
    message.deviceInfo =
      object.deviceInfo !== undefined && object.deviceInfo !== null
        ? DeviceInfoProto.fromPartial(object.deviceInfo)
        : undefined;
    message.hardwareMetrics =
      object.hardwareMetrics !== undefined && object.hardwareMetrics !== null
        ? HardwareMetricsProto.fromPartial(object.hardwareMetrics)
        : undefined;
    message.cameraInfo =
      object.cameraInfo !== undefined && object.cameraInfo !== null
        ? CameraProto.fromPartial(object.cameraInfo)
        : undefined;
    message.pipelineInfo =
      object.pipelineInfo !== undefined && object.pipelineInfo !== null
        ? PipelineProto.fromPartial(object.pipelineInfo)
        : undefined;
    message.setPipelineType =
      object.setPipelineType !== undefined && object.setPipelineType !== null
        ? SetPipelineTypeMessageProto.fromPartial(object.setPipelineType)
        : undefined;
    message.setPipelineSetting =
      object.setPipelineSetting !== undefined &&
      object.setPipelineSetting !== null
        ? SetPipleineSettingMessageProto.fromPartial(object.setPipelineSetting)
        : undefined;
    message.setPipelineIndex =
      object.setPipelineIndex !== undefined && object.setPipelineIndex !== null
        ? SetPipelineIndexMessageProto.fromPartial(object.setPipelineIndex)
        : undefined;
    message.setPipelineName =
      object.setPipelineName !== undefined && object.setPipelineName !== null
        ? SetPipelineNameMessageProto.fromPartial(object.setPipelineName)
        : undefined;
    message.setDefaultPipeline =
      object.setDefaultPipeline !== undefined &&
      object.setDefaultPipeline !== null
        ? SetDefaultPipelineMessageProto.fromPartial(object.setDefaultPipeline)
        : undefined;
    message.removePipelineIndex = object.removePipelineIndex ?? undefined;
    message.log =
      object.log !== undefined && object.log !== null
        ? LogMessageProto.fromPartial(object.log)
        : undefined;
    message.cameraPerformance =
      object.cameraPerformance !== undefined &&
      object.cameraPerformance !== null
        ? CameraPerformanceProto.fromPartial(object.cameraPerformance)
        : undefined;
    message.setNetworkSettings =
      object.setNetworkSettings !== undefined &&
      object.setNetworkSettings !== null
        ? SetNetworkSettingsProto.fromPartial(object.setNetworkSettings)
        : undefined;
    message.renameCamera =
      object.renameCamera !== undefined && object.renameCamera !== null
        ? RenameCameraMessageProto.fromPartial(object.renameCamera)
        : undefined;
    message.calibrationData =
      object.calibrationData !== undefined && object.calibrationData !== null
        ? CalibrationDataProto.fromPartial(object.calibrationData)
        : undefined;
    message.deleteCalibration =
      object.deleteCalibration !== undefined &&
      object.deleteCalibration !== null
        ? RemoveCalibrationDataMessageProto.fromPartial(
            object.deleteCalibration,
          )
        : undefined;
    message.setCameraRecordingStatus =
      object.setCameraRecordingStatus !== undefined &&
      object.setCameraRecordingStatus !== null
        ? SetCameraRecordingStatusMessageProto.fromPartial(
            object.setCameraRecordingStatus,
          )
        : undefined;
    message.setConnectionInfo =
      object.setConnectionInfo !== undefined &&
      object.setConnectionInfo !== null
        ? SetConnectionInfoProto.fromPartial(object.setConnectionInfo)
        : undefined;
    message.pipelineResult =
      object.pipelineResult !== undefined && object.pipelineResult !== null
        ? PipelineResultProto.fromPartial(object.pipelineResult)
        : undefined;
    message.alert =
      object.alert !== undefined && object.alert !== null
        ? AlertProto.fromPartial(object.alert)
        : undefined;
    message.pipelineTypeInfo =
      object.pipelineTypeInfo?.map((e) => PipelineTypeProto.fromPartial(e)) ||
      [];
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: proto/v1/message.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CameraProto } from "./camera";
import { DeviceInfoProto, HardwareMetricsProto } from "./device";
import { PipelineProto, PipelineTypeProto, SetPipelineTypeMessageProto } from "./pipeline";

export const protobufPackage = "proto.v1";

export enum MessageTypeProto {
  MESSAGE_TYPE_PROTO_UNSPECIFIED = 0,
  MESSAGE_TYPE_PROTO_SEND_DEVICE_INFO = 1,
  MESSAGE_TYPE_PROTO_SEND_METRICS = 2,
  MESSAGE_TYPE_PROTO_ADD_PIPELINE = 3,
  MESSAGE_TYPE_PROTO_SEND_PIPELINE_TYPES = 4,
  MESSAGE_TYPE_PROTO_ADD_CAMERA = 5,
  MESSAGE_TYPE_PROTO_SET_TYPE_FOR_PIPELINE = 6,
  UNRECOGNIZED = -1,
}

export function messageTypeProtoFromJSON(object: any): MessageTypeProto {
  switch (object) {
    case 0:
    case "MESSAGE_TYPE_PROTO_UNSPECIFIED":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_UNSPECIFIED;
    case 1:
    case "MESSAGE_TYPE_PROTO_SEND_DEVICE_INFO":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SEND_DEVICE_INFO;
    case 2:
    case "MESSAGE_TYPE_PROTO_SEND_METRICS":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SEND_METRICS;
    case 3:
    case "MESSAGE_TYPE_PROTO_ADD_PIPELINE":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_ADD_PIPELINE;
    case 4:
    case "MESSAGE_TYPE_PROTO_SEND_PIPELINE_TYPES":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SEND_PIPELINE_TYPES;
    case 5:
    case "MESSAGE_TYPE_PROTO_ADD_CAMERA":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_ADD_CAMERA;
    case 6:
    case "MESSAGE_TYPE_PROTO_SET_TYPE_FOR_PIPELINE":
      return MessageTypeProto.MESSAGE_TYPE_PROTO_SET_TYPE_FOR_PIPELINE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageTypeProto.UNRECOGNIZED;
  }
}

export function messageTypeProtoToJSON(object: MessageTypeProto): string {
  switch (object) {
    case MessageTypeProto.MESSAGE_TYPE_PROTO_UNSPECIFIED:
      return "MESSAGE_TYPE_PROTO_UNSPECIFIED";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SEND_DEVICE_INFO:
      return "MESSAGE_TYPE_PROTO_SEND_DEVICE_INFO";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SEND_METRICS:
      return "MESSAGE_TYPE_PROTO_SEND_METRICS";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_ADD_PIPELINE:
      return "MESSAGE_TYPE_PROTO_ADD_PIPELINE";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SEND_PIPELINE_TYPES:
      return "MESSAGE_TYPE_PROTO_SEND_PIPELINE_TYPES";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_ADD_CAMERA:
      return "MESSAGE_TYPE_PROTO_ADD_CAMERA";
    case MessageTypeProto.MESSAGE_TYPE_PROTO_SET_TYPE_FOR_PIPELINE:
      return "MESSAGE_TYPE_PROTO_SET_TYPE_FOR_PIPELINE";
    case MessageTypeProto.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MessageProto {
  type: MessageTypeProto;
  deviceInfo?: DeviceInfoProto | undefined;
  hardwareMetrics?: HardwareMetricsProto | undefined;
  cameraInfo?: CameraProto | undefined;
  pipelineInfo?: PipelineProto | undefined;
  setPipelineType?: SetPipelineTypeMessageProto | undefined;
  pipelineTypeInfo: PipelineTypeProto[];
}

function createBaseMessageProto(): MessageProto {
  return {
    type: 0,
    deviceInfo: undefined,
    hardwareMetrics: undefined,
    cameraInfo: undefined,
    pipelineInfo: undefined,
    setPipelineType: undefined,
    pipelineTypeInfo: [],
  };
}

export const MessageProto: MessageFns<MessageProto> = {
  encode(message: MessageProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.deviceInfo !== undefined) {
      DeviceInfoProto.encode(message.deviceInfo, writer.uint32(18).fork()).join();
    }
    if (message.hardwareMetrics !== undefined) {
      HardwareMetricsProto.encode(message.hardwareMetrics, writer.uint32(26).fork()).join();
    }
    if (message.cameraInfo !== undefined) {
      CameraProto.encode(message.cameraInfo, writer.uint32(34).fork()).join();
    }
    if (message.pipelineInfo !== undefined) {
      PipelineProto.encode(message.pipelineInfo, writer.uint32(42).fork()).join();
    }
    if (message.setPipelineType !== undefined) {
      SetPipelineTypeMessageProto.encode(message.setPipelineType, writer.uint32(50).fork()).join();
    }
    for (const v of message.pipelineTypeInfo) {
      PipelineTypeProto.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.deviceInfo = DeviceInfoProto.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.hardwareMetrics = HardwareMetricsProto.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cameraInfo = CameraProto.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pipelineInfo = PipelineProto.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.setPipelineType = SetPipelineTypeMessageProto.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.pipelineTypeInfo.push(PipelineTypeProto.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageProto {
    return {
      type: isSet(object.type) ? messageTypeProtoFromJSON(object.type) : 0,
      deviceInfo: isSet(object.deviceInfo) ? DeviceInfoProto.fromJSON(object.deviceInfo) : undefined,
      hardwareMetrics: isSet(object.hardwareMetrics)
        ? HardwareMetricsProto.fromJSON(object.hardwareMetrics)
        : undefined,
      cameraInfo: isSet(object.cameraInfo) ? CameraProto.fromJSON(object.cameraInfo) : undefined,
      pipelineInfo: isSet(object.pipelineInfo) ? PipelineProto.fromJSON(object.pipelineInfo) : undefined,
      setPipelineType: isSet(object.setPipelineType)
        ? SetPipelineTypeMessageProto.fromJSON(object.setPipelineType)
        : undefined,
      pipelineTypeInfo: globalThis.Array.isArray(object?.pipelineTypeInfo)
        ? object.pipelineTypeInfo.map((e: any) => PipelineTypeProto.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MessageProto): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = messageTypeProtoToJSON(message.type);
    }
    if (message.deviceInfo !== undefined) {
      obj.deviceInfo = DeviceInfoProto.toJSON(message.deviceInfo);
    }
    if (message.hardwareMetrics !== undefined) {
      obj.hardwareMetrics = HardwareMetricsProto.toJSON(message.hardwareMetrics);
    }
    if (message.cameraInfo !== undefined) {
      obj.cameraInfo = CameraProto.toJSON(message.cameraInfo);
    }
    if (message.pipelineInfo !== undefined) {
      obj.pipelineInfo = PipelineProto.toJSON(message.pipelineInfo);
    }
    if (message.setPipelineType !== undefined) {
      obj.setPipelineType = SetPipelineTypeMessageProto.toJSON(message.setPipelineType);
    }
    if (message.pipelineTypeInfo?.length) {
      obj.pipelineTypeInfo = message.pipelineTypeInfo.map((e) => PipelineTypeProto.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageProto>, I>>(base?: I): MessageProto {
    return MessageProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageProto>, I>>(object: I): MessageProto {
    const message = createBaseMessageProto();
    message.type = object.type ?? 0;
    message.deviceInfo = (object.deviceInfo !== undefined && object.deviceInfo !== null)
      ? DeviceInfoProto.fromPartial(object.deviceInfo)
      : undefined;
    message.hardwareMetrics = (object.hardwareMetrics !== undefined && object.hardwareMetrics !== null)
      ? HardwareMetricsProto.fromPartial(object.hardwareMetrics)
      : undefined;
    message.cameraInfo = (object.cameraInfo !== undefined && object.cameraInfo !== null)
      ? CameraProto.fromPartial(object.cameraInfo)
      : undefined;
    message.pipelineInfo = (object.pipelineInfo !== undefined && object.pipelineInfo !== null)
      ? PipelineProto.fromPartial(object.pipelineInfo)
      : undefined;
    message.setPipelineType = (object.setPipelineType !== undefined && object.setPipelineType !== null)
      ? SetPipelineTypeMessageProto.fromPartial(object.setPipelineType)
      : undefined;
    message.pipelineTypeInfo = object.pipelineTypeInfo?.map((e) => PipelineTypeProto.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

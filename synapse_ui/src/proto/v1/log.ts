// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: proto/v1/log.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto.v1";

export enum LogLevelProto {
  /** LOG_LEVEL_PROTO_UNSPECIFIED - Unspecified log level, used for default or unknown cases */
  LOG_LEVEL_PROTO_UNSPECIFIED = 0,
  /** LOG_LEVEL_PROTO_INFO - Debug level, used for detailed debugging information */
  LOG_LEVEL_PROTO_INFO = 2,
  /** LOG_LEVEL_PROTO_WARNING - Warning level, used for potentially harmful situations */
  LOG_LEVEL_PROTO_WARNING = 3,
  /** LOG_LEVEL_PROTO_ERROR - Error level, used for error events that might still allow the application to continue running */
  LOG_LEVEL_PROTO_ERROR = 4,
  UNRECOGNIZED = -1,
}

export function logLevelProtoFromJSON(object: any): LogLevelProto {
  switch (object) {
    case 0:
    case "LOG_LEVEL_PROTO_UNSPECIFIED":
      return LogLevelProto.LOG_LEVEL_PROTO_UNSPECIFIED;
    case 2:
    case "LOG_LEVEL_PROTO_INFO":
      return LogLevelProto.LOG_LEVEL_PROTO_INFO;
    case 3:
    case "LOG_LEVEL_PROTO_WARNING":
      return LogLevelProto.LOG_LEVEL_PROTO_WARNING;
    case 4:
    case "LOG_LEVEL_PROTO_ERROR":
      return LogLevelProto.LOG_LEVEL_PROTO_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LogLevelProto.UNRECOGNIZED;
  }
}

export function logLevelProtoToJSON(object: LogLevelProto): string {
  switch (object) {
    case LogLevelProto.LOG_LEVEL_PROTO_UNSPECIFIED:
      return "LOG_LEVEL_PROTO_UNSPECIFIED";
    case LogLevelProto.LOG_LEVEL_PROTO_INFO:
      return "LOG_LEVEL_PROTO_INFO";
    case LogLevelProto.LOG_LEVEL_PROTO_WARNING:
      return "LOG_LEVEL_PROTO_WARNING";
    case LogLevelProto.LOG_LEVEL_PROTO_ERROR:
      return "LOG_LEVEL_PROTO_ERROR";
    case LogLevelProto.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents a log message with its content, level, and timestamp */
export interface LogMessageProto {
  /** The log message content */
  message: string;
  /** Log level of the message */
  level: LogLevelProto;
  /** Unix timestamp in milliseconds */
  timestamp: number;
}

function createBaseLogMessageProto(): LogMessageProto {
  return { message: "", level: 0, timestamp: 0 };
}

export const LogMessageProto: MessageFns<LogMessageProto> = {
  encode(
    message: LogMessageProto,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.level !== 0) {
      writer.uint32(16).int32(message.level);
    }
    if (message.timestamp !== 0) {
      writer.uint32(24).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogMessageProto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogMessageProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.level = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogMessageProto {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      level: isSet(object.level) ? logLevelProtoFromJSON(object.level) : 0,
      timestamp: isSet(object.timestamp)
        ? globalThis.Number(object.timestamp)
        : 0,
    };
  },

  toJSON(message: LogMessageProto): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.level !== 0) {
      obj.level = logLevelProtoToJSON(message.level);
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogMessageProto>, I>>(
    base?: I,
  ): LogMessageProto {
    return LogMessageProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogMessageProto>, I>>(
    object: I,
  ): LogMessageProto {
    const message = createBaseLogMessageProto();
    message.message = object.message ?? "";
    message.level = object.level ?? 0;
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

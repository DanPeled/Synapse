// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: proto/v1/pipeline.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { SettingProto } from "../settings/v1/settings";

export const protobufPackage = "proto.v1";

export interface PipelineTypeProto {
  type: string;
  settings: SettingProto[];
}

export interface PipelineProto {
  name: string;
  index: number;
  type: PipelineTypeProto | undefined;
}

function createBasePipelineTypeProto(): PipelineTypeProto {
  return { type: "", settings: [] };
}

export const PipelineTypeProto: MessageFns<PipelineTypeProto> = {
  encode(message: PipelineTypeProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    for (const v of message.settings) {
      SettingProto.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PipelineTypeProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePipelineTypeProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.settings.push(SettingProto.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PipelineTypeProto {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      settings: globalThis.Array.isArray(object?.settings)
        ? object.settings.map((e: any) => SettingProto.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PipelineTypeProto): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.settings?.length) {
      obj.settings = message.settings.map((e) => SettingProto.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PipelineTypeProto>, I>>(base?: I): PipelineTypeProto {
    return PipelineTypeProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PipelineTypeProto>, I>>(object: I): PipelineTypeProto {
    const message = createBasePipelineTypeProto();
    message.type = object.type ?? "";
    message.settings = object.settings?.map((e) => SettingProto.fromPartial(e)) || [];
    return message;
  },
};

function createBasePipelineProto(): PipelineProto {
  return { name: "", index: 0, type: undefined };
}

export const PipelineProto: MessageFns<PipelineProto> = {
  encode(message: PipelineProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.index !== 0) {
      writer.uint32(16).uint32(message.index);
    }
    if (message.type !== undefined) {
      PipelineTypeProto.encode(message.type, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PipelineProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePipelineProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.index = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = PipelineTypeProto.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PipelineProto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      type: isSet(object.type) ? PipelineTypeProto.fromJSON(object.type) : undefined,
    };
  },

  toJSON(message: PipelineProto): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.type !== undefined) {
      obj.type = PipelineTypeProto.toJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PipelineProto>, I>>(base?: I): PipelineProto {
    return PipelineProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PipelineProto>, I>>(object: I): PipelineProto {
    const message = createBasePipelineProto();
    message.name = object.name ?? "";
    message.index = object.index ?? 0;
    message.type = (object.type !== undefined && object.type !== null)
      ? PipelineTypeProto.fromPartial(object.type)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

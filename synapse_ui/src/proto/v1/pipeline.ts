// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: proto/v1/pipeline.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { SettingMetaProto } from "../settings/v1/settings";
import { SettingValueProto } from "../settings/v1/value";

export const protobufPackage = "proto.v1";

/** Defines a type of pipeline with its associated settings metadata */
export interface PipelineTypeProto {
  /** The pipeline type identifier (e.g., "image-processing") */
  type: string;
  /** List of metadata for each setting related to this pipeline type */
  settings: SettingMetaProto[];
}

/** Represents an instance of a pipeline with a name, type, and settings values */
export interface PipelineProto {
  /** The human-readable name of the pipeline instance */
  name: string;
  /** The index or ID of this pipeline instance */
  index: number;
  /** The pipeline type identifier this instance corresponds to */
  type: string;
  /** Map of setting keys to their actual configured values for this pipeline instance */
  settingsValues: { [key: string]: SettingValueProto };
}

export interface PipelineProto_SettingsValuesEntry {
  key: string;
  value: SettingValueProto | undefined;
}

/** Message to request changing the type of a specific pipeline instance */
export interface SetPipelineTypeMessageProto {
  /** The new pipeline type to assign */
  newType: string;
  /** The index of the pipeline instance to update */
  pipelineIndex: number;
}

/** Message to request updating a single setting of a specific pipeline instance */
export interface SetPipleineSettingMessageProto {
  /** The key/name of the setting to update */
  setting: string;
  /** The new value to assign to the setting */
  value: SettingValueProto | undefined;
  /** The index of the pipeline instance to update */
  pipelineIndex: number;
}

export interface SetPipelineIndexMessageProto {
  pipelineIndex: number;
  cameraIndex: number;
}

export interface SetPipelineNameMessageProto {
  pipelineIndex: number;
  name: string;
}

function createBasePipelineTypeProto(): PipelineTypeProto {
  return { type: "", settings: [] };
}

export const PipelineTypeProto: MessageFns<PipelineTypeProto> = {
  encode(
    message: PipelineTypeProto,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    for (const v of message.settings) {
      SettingMetaProto.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PipelineTypeProto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePipelineTypeProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.settings.push(
            SettingMetaProto.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PipelineTypeProto {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      settings: globalThis.Array.isArray(object?.settings)
        ? object.settings.map((e: any) => SettingMetaProto.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PipelineTypeProto): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.settings?.length) {
      obj.settings = message.settings.map((e) => SettingMetaProto.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PipelineTypeProto>, I>>(
    base?: I,
  ): PipelineTypeProto {
    return PipelineTypeProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PipelineTypeProto>, I>>(
    object: I,
  ): PipelineTypeProto {
    const message = createBasePipelineTypeProto();
    message.type = object.type ?? "";
    message.settings =
      object.settings?.map((e) => SettingMetaProto.fromPartial(e)) || [];
    return message;
  },
};

function createBasePipelineProto(): PipelineProto {
  return { name: "", index: 0, type: "", settingsValues: {} };
}

export const PipelineProto: MessageFns<PipelineProto> = {
  encode(
    message: PipelineProto,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.index !== 0) {
      writer.uint32(16).uint32(message.index);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    Object.entries(message.settingsValues).forEach(([key, value]) => {
      PipelineProto_SettingsValuesEntry.encode(
        { key: key as any, value },
        writer.uint32(34).fork(),
      ).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PipelineProto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePipelineProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.index = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = PipelineProto_SettingsValuesEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry4.value !== undefined) {
            message.settingsValues[entry4.key] = entry4.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PipelineProto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      settingsValues: isObject(object.settingsValues)
        ? Object.entries(object.settingsValues).reduce<{
            [key: string]: SettingValueProto;
          }>((acc, [key, value]) => {
            acc[key] = SettingValueProto.fromJSON(value);
            return acc;
          }, {})
        : {},
    };
  },

  toJSON(message: PipelineProto): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.settingsValues) {
      const entries = Object.entries(message.settingsValues);
      if (entries.length > 0) {
        obj.settingsValues = {};
        entries.forEach(([k, v]) => {
          obj.settingsValues[k] = SettingValueProto.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PipelineProto>, I>>(
    base?: I,
  ): PipelineProto {
    return PipelineProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PipelineProto>, I>>(
    object: I,
  ): PipelineProto {
    const message = createBasePipelineProto();
    message.name = object.name ?? "";
    message.index = object.index ?? 0;
    message.type = object.type ?? "";
    message.settingsValues = Object.entries(
      object.settingsValues ?? {},
    ).reduce<{ [key: string]: SettingValueProto }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = SettingValueProto.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBasePipelineProto_SettingsValuesEntry(): PipelineProto_SettingsValuesEntry {
  return { key: "", value: undefined };
}

export const PipelineProto_SettingsValuesEntry: MessageFns<PipelineProto_SettingsValuesEntry> =
  {
    encode(
      message: PipelineProto_SettingsValuesEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== undefined) {
        SettingValueProto.encode(
          message.value,
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): PipelineProto_SettingsValuesEntry {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBasePipelineProto_SettingsValuesEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.value = SettingValueProto.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): PipelineProto_SettingsValuesEntry {
      return {
        key: isSet(object.key) ? globalThis.String(object.key) : "",
        value: isSet(object.value)
          ? SettingValueProto.fromJSON(object.value)
          : undefined,
      };
    },

    toJSON(message: PipelineProto_SettingsValuesEntry): unknown {
      const obj: any = {};
      if (message.key !== "") {
        obj.key = message.key;
      }
      if (message.value !== undefined) {
        obj.value = SettingValueProto.toJSON(message.value);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<PipelineProto_SettingsValuesEntry>, I>>(
      base?: I,
    ): PipelineProto_SettingsValuesEntry {
      return PipelineProto_SettingsValuesEntry.fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<DeepPartial<PipelineProto_SettingsValuesEntry>, I>,
    >(object: I): PipelineProto_SettingsValuesEntry {
      const message = createBasePipelineProto_SettingsValuesEntry();
      message.key = object.key ?? "";
      message.value =
        object.value !== undefined && object.value !== null
          ? SettingValueProto.fromPartial(object.value)
          : undefined;
      return message;
    },
  };

function createBaseSetPipelineTypeMessageProto(): SetPipelineTypeMessageProto {
  return { newType: "", pipelineIndex: 0 };
}

export const SetPipelineTypeMessageProto: MessageFns<SetPipelineTypeMessageProto> =
  {
    encode(
      message: SetPipelineTypeMessageProto,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.newType !== "") {
        writer.uint32(10).string(message.newType);
      }
      if (message.pipelineIndex !== 0) {
        writer.uint32(16).int32(message.pipelineIndex);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): SetPipelineTypeMessageProto {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseSetPipelineTypeMessageProto();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.newType = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.pipelineIndex = reader.int32();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): SetPipelineTypeMessageProto {
      return {
        newType: isSet(object.newType) ? globalThis.String(object.newType) : "",
        pipelineIndex: isSet(object.pipelineIndex)
          ? globalThis.Number(object.pipelineIndex)
          : 0,
      };
    },

    toJSON(message: SetPipelineTypeMessageProto): unknown {
      const obj: any = {};
      if (message.newType !== "") {
        obj.newType = message.newType;
      }
      if (message.pipelineIndex !== 0) {
        obj.pipelineIndex = Math.round(message.pipelineIndex);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<SetPipelineTypeMessageProto>, I>>(
      base?: I,
    ): SetPipelineTypeMessageProto {
      return SetPipelineTypeMessageProto.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<SetPipelineTypeMessageProto>, I>>(
      object: I,
    ): SetPipelineTypeMessageProto {
      const message = createBaseSetPipelineTypeMessageProto();
      message.newType = object.newType ?? "";
      message.pipelineIndex = object.pipelineIndex ?? 0;
      return message;
    },
  };

function createBaseSetPipleineSettingMessageProto(): SetPipleineSettingMessageProto {
  return { setting: "", value: undefined, pipelineIndex: 0 };
}

export const SetPipleineSettingMessageProto: MessageFns<SetPipleineSettingMessageProto> =
  {
    encode(
      message: SetPipleineSettingMessageProto,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.setting !== "") {
        writer.uint32(10).string(message.setting);
      }
      if (message.value !== undefined) {
        SettingValueProto.encode(
          message.value,
          writer.uint32(18).fork(),
        ).join();
      }
      if (message.pipelineIndex !== 0) {
        writer.uint32(24).int32(message.pipelineIndex);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): SetPipleineSettingMessageProto {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseSetPipleineSettingMessageProto();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.setting = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.value = SettingValueProto.decode(reader, reader.uint32());
            continue;
          }
          case 3: {
            if (tag !== 24) {
              break;
            }

            message.pipelineIndex = reader.int32();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): SetPipleineSettingMessageProto {
      return {
        setting: isSet(object.setting) ? globalThis.String(object.setting) : "",
        value: isSet(object.value)
          ? SettingValueProto.fromJSON(object.value)
          : undefined,
        pipelineIndex: isSet(object.pipelineIndex)
          ? globalThis.Number(object.pipelineIndex)
          : 0,
      };
    },

    toJSON(message: SetPipleineSettingMessageProto): unknown {
      const obj: any = {};
      if (message.setting !== "") {
        obj.setting = message.setting;
      }
      if (message.value !== undefined) {
        obj.value = SettingValueProto.toJSON(message.value);
      }
      if (message.pipelineIndex !== 0) {
        obj.pipelineIndex = Math.round(message.pipelineIndex);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<SetPipleineSettingMessageProto>, I>>(
      base?: I,
    ): SetPipleineSettingMessageProto {
      return SetPipleineSettingMessageProto.fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<DeepPartial<SetPipleineSettingMessageProto>, I>,
    >(object: I): SetPipleineSettingMessageProto {
      const message = createBaseSetPipleineSettingMessageProto();
      message.setting = object.setting ?? "";
      message.value =
        object.value !== undefined && object.value !== null
          ? SettingValueProto.fromPartial(object.value)
          : undefined;
      message.pipelineIndex = object.pipelineIndex ?? 0;
      return message;
    },
  };

function createBaseSetPipelineIndexMessageProto(): SetPipelineIndexMessageProto {
  return { pipelineIndex: 0, cameraIndex: 0 };
}

export const SetPipelineIndexMessageProto: MessageFns<SetPipelineIndexMessageProto> =
  {
    encode(
      message: SetPipelineIndexMessageProto,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.pipelineIndex !== 0) {
        writer.uint32(8).int32(message.pipelineIndex);
      }
      if (message.cameraIndex !== 0) {
        writer.uint32(16).int32(message.cameraIndex);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): SetPipelineIndexMessageProto {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseSetPipelineIndexMessageProto();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.pipelineIndex = reader.int32();
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.cameraIndex = reader.int32();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): SetPipelineIndexMessageProto {
      return {
        pipelineIndex: isSet(object.pipelineIndex)
          ? globalThis.Number(object.pipelineIndex)
          : 0,
        cameraIndex: isSet(object.cameraIndex)
          ? globalThis.Number(object.cameraIndex)
          : 0,
      };
    },

    toJSON(message: SetPipelineIndexMessageProto): unknown {
      const obj: any = {};
      if (message.pipelineIndex !== 0) {
        obj.pipelineIndex = Math.round(message.pipelineIndex);
      }
      if (message.cameraIndex !== 0) {
        obj.cameraIndex = Math.round(message.cameraIndex);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<SetPipelineIndexMessageProto>, I>>(
      base?: I,
    ): SetPipelineIndexMessageProto {
      return SetPipelineIndexMessageProto.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<SetPipelineIndexMessageProto>, I>>(
      object: I,
    ): SetPipelineIndexMessageProto {
      const message = createBaseSetPipelineIndexMessageProto();
      message.pipelineIndex = object.pipelineIndex ?? 0;
      message.cameraIndex = object.cameraIndex ?? 0;
      return message;
    },
  };

function createBaseSetPipelineNameMessageProto(): SetPipelineNameMessageProto {
  return { pipelineIndex: 0, name: "" };
}

export const SetPipelineNameMessageProto: MessageFns<SetPipelineNameMessageProto> =
  {
    encode(
      message: SetPipelineNameMessageProto,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.pipelineIndex !== 0) {
        writer.uint32(8).int32(message.pipelineIndex);
      }
      if (message.name !== "") {
        writer.uint32(18).string(message.name);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): SetPipelineNameMessageProto {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseSetPipelineNameMessageProto();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.pipelineIndex = reader.int32();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.name = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): SetPipelineNameMessageProto {
      return {
        pipelineIndex: isSet(object.pipelineIndex)
          ? globalThis.Number(object.pipelineIndex)
          : 0,
        name: isSet(object.name) ? globalThis.String(object.name) : "",
      };
    },

    toJSON(message: SetPipelineNameMessageProto): unknown {
      const obj: any = {};
      if (message.pipelineIndex !== 0) {
        obj.pipelineIndex = Math.round(message.pipelineIndex);
      }
      if (message.name !== "") {
        obj.name = message.name;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<SetPipelineNameMessageProto>, I>>(
      base?: I,
    ): SetPipelineNameMessageProto {
      return SetPipelineNameMessageProto.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<SetPipelineNameMessageProto>, I>>(
      object: I,
    ): SetPipelineNameMessageProto {
      const message = createBaseSetPipelineNameMessageProto();
      message.pipelineIndex = object.pipelineIndex ?? 0;
      message.name = object.name ?? "";
      return message;
    },
  };

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

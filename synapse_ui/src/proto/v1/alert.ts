// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: proto/v1/alert.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto.v1";

export enum AlertTypeProto {
  ALERT_TYPE_PROTO_UNSPECIFIED = 0,
  ALERT_TYPE_PROTO_INFO = 1,
  ALERT_TYPE_PROTO_WARNING = 2,
  ALERT_TYPE_PROTO_ERROR = 3,
  UNRECOGNIZED = -1,
}

export function alertTypeProtoFromJSON(object: any): AlertTypeProto {
  switch (object) {
    case 0:
    case "ALERT_TYPE_PROTO_UNSPECIFIED":
      return AlertTypeProto.ALERT_TYPE_PROTO_UNSPECIFIED;
    case 1:
    case "ALERT_TYPE_PROTO_INFO":
      return AlertTypeProto.ALERT_TYPE_PROTO_INFO;
    case 2:
    case "ALERT_TYPE_PROTO_WARNING":
      return AlertTypeProto.ALERT_TYPE_PROTO_WARNING;
    case 3:
    case "ALERT_TYPE_PROTO_ERROR":
      return AlertTypeProto.ALERT_TYPE_PROTO_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AlertTypeProto.UNRECOGNIZED;
  }
}

export function alertTypeProtoToJSON(object: AlertTypeProto): string {
  switch (object) {
    case AlertTypeProto.ALERT_TYPE_PROTO_UNSPECIFIED:
      return "ALERT_TYPE_PROTO_UNSPECIFIED";
    case AlertTypeProto.ALERT_TYPE_PROTO_INFO:
      return "ALERT_TYPE_PROTO_INFO";
    case AlertTypeProto.ALERT_TYPE_PROTO_WARNING:
      return "ALERT_TYPE_PROTO_WARNING";
    case AlertTypeProto.ALERT_TYPE_PROTO_ERROR:
      return "ALERT_TYPE_PROTO_ERROR";
    case AlertTypeProto.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Structure for an alert message */
export interface AlertProto {
  /** Type of the alert (info, warning, error) */
  type: AlertTypeProto;
  /** The alert message */
  message: string;
}

function createBaseAlertProto(): AlertProto {
  return { type: 0, message: "" };
}

export const AlertProto: MessageFns<AlertProto> = {
  encode(
    message: AlertProto,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AlertProto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertProto {
    return {
      type: isSet(object.type) ? alertTypeProtoFromJSON(object.type) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: AlertProto): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = alertTypeProtoToJSON(message.type);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AlertProto>, I>>(base?: I): AlertProto {
    return AlertProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlertProto>, I>>(
    object: I,
  ): AlertProto {
    const message = createBaseAlertProto();
    message.type = object.type ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

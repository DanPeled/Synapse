// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: proto/v1/device.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto.v1";

export interface DeviceInfoProto {
  hostname: string;
  ip: string;
  platform: string;
  networkInterfaces: string[];
}

export interface HardwareMetricsProto {
  cpuTemp: number;
  cpuUsage: number;
  diskUsage: number;
  ramUsage: number;
  uptime: number;
  lastFetched?: string | undefined;
}

function createBaseDeviceInfoProto(): DeviceInfoProto {
  return { hostname: "", ip: "", platform: "", networkInterfaces: [] };
}

export const DeviceInfoProto: MessageFns<DeviceInfoProto> = {
  encode(message: DeviceInfoProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hostname !== "") {
      writer.uint32(10).string(message.hostname);
    }
    if (message.ip !== "") {
      writer.uint32(18).string(message.ip);
    }
    if (message.platform !== "") {
      writer.uint32(26).string(message.platform);
    }
    for (const v of message.networkInterfaces) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceInfoProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceInfoProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.hostname = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ip = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.platform = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.networkInterfaces.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceInfoProto {
    return {
      hostname: isSet(object.hostname) ? globalThis.String(object.hostname) : "",
      ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
      platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
      networkInterfaces: globalThis.Array.isArray(object?.networkInterfaces)
        ? object.networkInterfaces.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DeviceInfoProto): unknown {
    const obj: any = {};
    if (message.hostname !== "") {
      obj.hostname = message.hostname;
    }
    if (message.ip !== "") {
      obj.ip = message.ip;
    }
    if (message.platform !== "") {
      obj.platform = message.platform;
    }
    if (message.networkInterfaces?.length) {
      obj.networkInterfaces = message.networkInterfaces;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceInfoProto>, I>>(base?: I): DeviceInfoProto {
    return DeviceInfoProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceInfoProto>, I>>(object: I): DeviceInfoProto {
    const message = createBaseDeviceInfoProto();
    message.hostname = object.hostname ?? "";
    message.ip = object.ip ?? "";
    message.platform = object.platform ?? "";
    message.networkInterfaces = object.networkInterfaces?.map((e) => e) || [];
    return message;
  },
};

function createBaseHardwareMetricsProto(): HardwareMetricsProto {
  return { cpuTemp: 0, cpuUsage: 0, diskUsage: 0, ramUsage: 0, uptime: 0, lastFetched: undefined };
}

export const HardwareMetricsProto: MessageFns<HardwareMetricsProto> = {
  encode(message: HardwareMetricsProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cpuTemp !== 0) {
      writer.uint32(13).float(message.cpuTemp);
    }
    if (message.cpuUsage !== 0) {
      writer.uint32(21).float(message.cpuUsage);
    }
    if (message.diskUsage !== 0) {
      writer.uint32(29).float(message.diskUsage);
    }
    if (message.ramUsage !== 0) {
      writer.uint32(37).float(message.ramUsage);
    }
    if (message.uptime !== 0) {
      writer.uint32(45).float(message.uptime);
    }
    if (message.lastFetched !== undefined) {
      writer.uint32(50).string(message.lastFetched);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HardwareMetricsProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHardwareMetricsProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.cpuTemp = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.cpuUsage = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.diskUsage = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.ramUsage = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.uptime = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.lastFetched = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HardwareMetricsProto {
    return {
      cpuTemp: isSet(object.cpuTemp) ? globalThis.Number(object.cpuTemp) : 0,
      cpuUsage: isSet(object.cpuUsage) ? globalThis.Number(object.cpuUsage) : 0,
      diskUsage: isSet(object.diskUsage) ? globalThis.Number(object.diskUsage) : 0,
      ramUsage: isSet(object.ramUsage) ? globalThis.Number(object.ramUsage) : 0,
      uptime: isSet(object.uptime) ? globalThis.Number(object.uptime) : 0,
      lastFetched: isSet(object.lastFetched) ? globalThis.String(object.lastFetched) : undefined,
    };
  },

  toJSON(message: HardwareMetricsProto): unknown {
    const obj: any = {};
    if (message.cpuTemp !== 0) {
      obj.cpuTemp = message.cpuTemp;
    }
    if (message.cpuUsage !== 0) {
      obj.cpuUsage = message.cpuUsage;
    }
    if (message.diskUsage !== 0) {
      obj.diskUsage = message.diskUsage;
    }
    if (message.ramUsage !== 0) {
      obj.ramUsage = message.ramUsage;
    }
    if (message.uptime !== 0) {
      obj.uptime = message.uptime;
    }
    if (message.lastFetched !== undefined) {
      obj.lastFetched = message.lastFetched;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HardwareMetricsProto>, I>>(base?: I): HardwareMetricsProto {
    return HardwareMetricsProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HardwareMetricsProto>, I>>(object: I): HardwareMetricsProto {
    const message = createBaseHardwareMetricsProto();
    message.cpuTemp = object.cpuTemp ?? 0;
    message.cpuUsage = object.cpuUsage ?? 0;
    message.diskUsage = object.diskUsage ?? 0;
    message.ramUsage = object.ramUsage ?? 0;
    message.uptime = object.uptime ?? 0;
    message.lastFetched = object.lastFetched ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/v1/camera.proto, proto/v1/device.proto, proto/v1/message.proto, proto/v1/pipeline.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import Dict, List

import betterproto

from ..settings import v1 as _settings_v1__


class MessageTypeProto(betterproto.Enum):
    UNSPECIFIED = 0
    SEND_DEVICE_INFO = 1
    SEND_METRICS = 2
    ADD_PIPELINE = 3
    SEND_PIPELINE_TYPES = 4
    ADD_CAMERA = 5
    SET_TYPE_FOR_PIPELINE = 6
    SET_SETTING = 7
    SET_PIPELINE_INDEX = 8
    SET_PIPELINE_NAME = 9
    DELETE_PIPELINE = 10


@dataclass(eq=False, repr=False)
class CameraProto(betterproto.Message):
    name: str = betterproto.string_field(1)
    stream_path: str = betterproto.string_field(2)
    physical_connection: str = betterproto.string_field(3)
    index: int = betterproto.int32_field(4)
    pipeline_index: int = betterproto.int32_field(5)
    default_pipeline: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class LatencyStatusProto(betterproto.Message):
    latency_capture: int = betterproto.int64_field(1)
    latency_process: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class SetDefaultPipelineMessageProto(betterproto.Message):
    camera_index: int = betterproto.int32_field(1)
    pipeline_index: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class DeviceInfoProto(betterproto.Message):
    """Information about a device's network and system identification"""

    hostname: str = betterproto.string_field(1)
    """The device's hostname"""

    ip: str = betterproto.string_field(2)
    """The IP address of the device"""

    platform: str = betterproto.string_field(3)
    """The platform or operating system (e.g., "linux", "windows")"""

    network_interfaces: List[str] = betterproto.string_field(4)
    """List of network interfaces available on the device"""


@dataclass(eq=False, repr=False)
class HardwareMetricsProto(betterproto.Message):
    """Metrics related to the hardware status of a device"""

    cpu_temp: float = betterproto.float_field(1)
    """CPU temperature in degrees Celsius"""

    cpu_usage: float = betterproto.float_field(2)
    """CPU usage as a percentage (0 to 100)"""

    disk_usage: float = betterproto.float_field(3)
    """Disk usage as a percentage (0 to 100)"""

    ram_usage: float = betterproto.float_field(4)
    """RAM usage"""

    memory: float = betterproto.float_field(5)
    """Total memory available"""

    uptime: float = betterproto.float_field(6)
    """Uptime of the device in seconds"""

    last_fetched: str = betterproto.string_field(7)
    """
    Timestamp when the metrics were last fetched (ISO 8601 or other format)
    """


@dataclass(eq=False, repr=False)
class PipelineTypeProto(betterproto.Message):
    """Defines a type of pipeline with its associated settings metadata"""

    type: str = betterproto.string_field(1)
    """The pipeline type identifier (e.g., "image-processing")"""

    settings: List["_settings_v1__.SettingMetaProto"] = betterproto.message_field(2)
    """List of metadata for each setting related to this pipeline type"""


@dataclass(eq=False, repr=False)
class PipelineProto(betterproto.Message):
    """
    Represents an instance of a pipeline with a name, type, and settings values
    """

    name: str = betterproto.string_field(1)
    """The human-readable name of the pipeline instance"""

    index: int = betterproto.uint32_field(2)
    """The index or ID of this pipeline instance"""

    type: str = betterproto.string_field(3)
    """The pipeline type identifier this instance corresponds to"""

    settings_values: Dict[str, "_settings_v1__.SettingValueProto"] = (
        betterproto.map_field(4, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE)
    )
    """
    Map of setting keys to their actual configured values for this pipeline instance
    """


@dataclass(eq=False, repr=False)
class SetPipelineTypeMessageProto(betterproto.Message):
    """Message to request changing the type of a specific pipeline instance"""

    new_type: str = betterproto.string_field(1)
    """The new pipeline type to assign"""

    pipeline_index: int = betterproto.int32_field(2)
    """The index of the pipeline instance to update"""


@dataclass(eq=False, repr=False)
class SetPipleineSettingMessageProto(betterproto.Message):
    """
    Message to request updating a single setting of a specific pipeline instance
    """

    setting: str = betterproto.string_field(1)
    """The key/name of the setting to update"""

    value: "_settings_v1__.SettingValueProto" = betterproto.message_field(2)
    """The new value to assign to the setting"""

    pipeline_index: int = betterproto.int32_field(3)
    """The index of the pipeline instance to update"""


@dataclass(eq=False, repr=False)
class SetPipelineIndexMessageProto(betterproto.Message):
    pipeline_index: int = betterproto.int32_field(1)
    camera_index: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class SetPipelineNameMessageProto(betterproto.Message):
    pipeline_index: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MessageProto(betterproto.Message):
    type: "MessageTypeProto" = betterproto.enum_field(1)
    device_info: "DeviceInfoProto" = betterproto.message_field(2, group="payload")
    hardware_metrics: "HardwareMetricsProto" = betterproto.message_field(
        3, group="payload"
    )
    camera_info: "CameraProto" = betterproto.message_field(4, group="payload")
    pipeline_info: "PipelineProto" = betterproto.message_field(5, group="payload")
    set_pipeline_type: "SetPipelineTypeMessageProto" = betterproto.message_field(
        6, group="payload"
    )
    set_pipeline_setting: "SetPipleineSettingMessageProto" = betterproto.message_field(
        7, group="payload"
    )
    set_pipeline_index: "SetPipelineIndexMessageProto" = betterproto.message_field(
        8, group="payload"
    )
    set_pipeline_name: "SetPipelineNameMessageProto" = betterproto.message_field(
        9, group="payload"
    )
    remove_pipeline_index: int = betterproto.int32_field(10, group="payload")
    pipeline_type_info: List["PipelineTypeProto"] = betterproto.message_field(11)

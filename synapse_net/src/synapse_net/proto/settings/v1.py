# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/settings/v1/color.proto, proto/settings/v1/value.proto, proto/settings/v1/list_options.proto, proto/settings/v1/range.proto, proto/settings/v1/constraint_type.proto, proto/settings/v1/settings.proto, proto/settings/v1/list.proto, proto/settings/v1/string.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto


class ColorFormatProto(betterproto.Enum):
    COLOR_FORMAT_PROTO_UNSPECIFIED = 0
    COLOR_FORMAT_PROTO_HEX = 1
    COLOR_FORMAT_PROTO_RGB = 2
    COLOR_FORMAT_PROTO_HSV = 3


class ConstraintTypeProto(betterproto.Enum):
    CONSTRAINT_TYPE_PROTO_UNSPECIFIED = 0
    CONSTRAINT_TYPE_PROTO_RANGE = 1
    CONSTRAINT_TYPE_PROTO_LIST = 2
    CONSTRAINT_TYPE_PROTO_STRING = 3
    CONSTRAINT_TYPE_PROTO_COLOR = 4
    CONSTRAINT_TYPE_PROTO_BOOLEAN = 5
    CONSTRAINT_TYPE_PROTO_LIST_OPTIONS = 8


@dataclass
class ColorConstraintProto(betterproto.Message):
    format: "ColorFormatProto" = betterproto.enum_field(1)
    range_mode: bool = betterproto.bool_field(2)


@dataclass
class SettingValueProto(betterproto.Message):
    int_value: int = betterproto.int32_field(1, group="scalar_value")
    string_value: str = betterproto.string_field(2, group="scalar_value")
    bool_value: bool = betterproto.bool_field(3, group="scalar_value")
    float_value: float = betterproto.float_field(4, group="scalar_value")
    bytes_value: bytes = betterproto.bytes_field(5, group="scalar_value")
    int_array_value: List[int] = betterproto.int32_field(6)
    string_array_value: List[str] = betterproto.string_field(7)
    bool_array_value: List[bool] = betterproto.bool_field(8)
    float_array_value: List[float] = betterproto.float_field(9)
    bytes_array_value: List[bytes] = betterproto.bytes_field(10)


@dataclass
class ListOptionsConstraintProto(betterproto.Message):
    options: List["SettingValueProto"] = betterproto.message_field(1)
    # If true, the user can select multiple options from the list.If false, the
    # user can only select one option.
    allow_multiple: bool = betterproto.bool_field(2)


@dataclass
class RangeConstraintProto(betterproto.Message):
    int_range: "RangeConstraintProtoIntRange" = betterproto.message_field(
        1, group="value_type"
    )
    float_range: "RangeConstraintProtoFloatRange" = betterproto.message_field(
        2, group="value_type"
    )


@dataclass
class RangeConstraintProtoIntRange(betterproto.Message):
    min: Optional[int] = betterproto.message_field(1, wraps=betterproto.TYPE_INT32)
    max: Optional[int] = betterproto.message_field(2, wraps=betterproto.TYPE_INT32)
    step: Optional[int] = betterproto.message_field(3, wraps=betterproto.TYPE_INT32)


@dataclass
class RangeConstraintProtoFloatRange(betterproto.Message):
    min: Optional[float] = betterproto.message_field(1, wraps=betterproto.TYPE_FLOAT)
    max: Optional[float] = betterproto.message_field(2, wraps=betterproto.TYPE_FLOAT)
    step: Optional[float] = betterproto.message_field(3, wraps=betterproto.TYPE_FLOAT)


@dataclass
class ConstraintConfigProto(betterproto.Message):
    range: "RangeConstraintProto" = betterproto.message_field(1, group="config")
    list_options: "ListOptionsConstraintProto" = betterproto.message_field(
        2, group="config"
    )
    color: "ColorConstraintProto" = betterproto.message_field(3, group="config")


@dataclass
class ConstraintProto(betterproto.Message):
    type: "ConstraintTypeProto" = betterproto.enum_field(4)
    constraint: "ConstraintConfigProto" = betterproto.message_field(5)


@dataclass
class SettingProto(betterproto.Message):
    name: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    value: "SettingValueProto" = betterproto.message_field(3)
    constraint: "ConstraintProto" = betterproto.message_field(4)


@dataclass
class ListConsraintProto(betterproto.Message):
    item_constraint: "ConstraintProto" = betterproto.message_field(1)
    min_length: int = betterproto.int32_field(2)
    max_length: int = betterproto.int32_field(3)


@dataclass
class StringConstraintProto(betterproto.Message):
    min_length: Optional[int] = betterproto.message_field(
        1, wraps=betterproto.TYPE_INT32
    )
    max_length: Optional[int] = betterproto.message_field(
        2, wraps=betterproto.TYPE_INT32
    )
    pattern: Optional[str] = betterproto.message_field(3, wraps=betterproto.TYPE_STRING)
